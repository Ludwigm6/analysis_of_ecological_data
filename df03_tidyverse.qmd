# Introduction to tidyverse

The R Tidyverse is a [collection of packages](https://www.tidyverse.org/packages/) for data handling, analysis and visualization.
If you want to use the `tidyverse`, you have to install the additional packages first with the `install.packages()` function.
Once installed, you then have to tell R to make the `tidyverse` functions available in your current R session with `library()`
You only have to install a package once, but loading it has to be done every time you start a new R session. It is recommened to either not 
include the `install.packages()` in your script or just comment it out like below.


```{r}
# install.packages("tidyverse")
library(tidyverse)
```

As you see in the output, `library(tidyverse)` actually loads nine different packages. It will also give you a warning about conflicting functions. Do not worry for now, we will get to that in time.


## Why tidyverse?


* consistent syntax and workflows
* makes code more readable
* pipe operator `%>%` / `|>` can chain functions together
* **tidy data approach**
    * rows are observations
    * columns are variables / features


![https://ajsmit.github.io/Intro_R_Official/figures/tidy_workflow.png](https://ajsmit.github.io/Intro_R_Official/figures/tidy_workflow.png)



## data.frames with dplyr

* provides functions for `data.frame` manipulation
* can complement or replace base R functions


```{r}
#| echo: false
#| fig-sub: "https://biostat2.uni.lu/lectures/img/06/vaudor_dplyr_schema.png"
knitr::include_graphics("https://biostat2.uni.lu/lectures/img/06/vaudor_dplyr_schema.png")
```


Of course, you can also load single packages from the `tidyverse` with the `library()` function.



```{r}
library(dplyr)
aasee = read.csv("data/2021-06_aasee.csv")
```



### `slice` - a slice of data - i.e. the specified rows
```{r}
aasee = slice(aasee, seq(8))
```

### `select` - selects columns

```{r}
select(aasee, Wassertemperatur)
```


### `filter` - filters rows based on logical operators
```{r}
filter(aasee, Wassertemperatur < 18)
```

### `mutate` - mutates the data.frame by adding columns

```{r}
mutate(aasee, t_kelvin = Wassertemperatur + 273.15)
```

### `summarise` - summarises data
```{r}
summarise(aasee, minimum_t = min(Wassertemperatur))
```


The functions above could all be realized with base R:

```{r}
#| eval: false
# the same in base R

# select
aasee$Wassertemperatur

# filter
aasee[,aasee$Wassertemperatur < 18]

# mutate
aasee$t_kelvin = aasee$Wassertemperatur + 273.15

# summarise
min(aasee$Wassertemperatur)

```



## The pipe operator

The strength of dplyr is the possibility to chain functions with `%>%` or `|>`.


```{r}
aasee|> 
    filter(Wassertemperatur < 18) |> 
    select(pH.Wert) |>  
    max()
```


With base R functions this looks messy, because we have to use functions inside functions.

```{r}
max(aasee$pH.Wert[aasee$Wassertemperatur < 18])
```




