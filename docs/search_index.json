[["advanced-visualizations.html", "15 Advanced Visualizations 15.1 The grammar of graphics 15.2 TASK: Publication ready figures 15.3 Solution", " 15 Advanced Visualizations Es gibt nur eine Breitbandleitung ins Hirn und das sind die Augen. David Krisel In the course, we used three datasets. All of them have different features and difficulties that we need to keep in mind when we want to visualize parts of the data to point out some interesting facts! The Aasee Water Monitoring data has a temporal component and “continuous” measurements. The arthoropode species on crop fields follow the classic plot based design and allows for comparisons between different groups. The trees and districts of Muenster potentially have a spatial component to it but also allow for comparisons of the different species and districts. 15.1 The grammar of graphics Scientific figures and advanced visualization in R are usually done with the ggplot2 package. https://ggplot2.tidyverse.org/ tidyverse package: synergies and integration with e.g. dplyr layer based language that are combined with + differentiated by “static” and “dynamic” parameters many extensions: https://exts.ggplot2.tidyverse.org/gallery/ Gallery for inspiration: https://r-graph-gallery.com/index.html library(ggplot2) library(viridis) ## Loading required package: viridisLite # data overview species = read.csv(&quot;data/crop_species.csv&quot;) 15.1.1 Initialze the plot Tell ggplot which data.frame is the basis for the plot. ggplot(data = species) The mapping argument of the ggplot() function handles which columns of the data should be used for which purpose. To specify this, we use the aes() function (aesthetics). Common things that we specify: x y group color fill Here we specify that on the x-axis in our plot represent the AraInd column. As a result we get the proper y-axis, but still no data is shown. For this, we have to specify in which form the data should be depicted. ggplot(data = species, mapping = aes(x = AraInd)) 15.1.2 Geometry types There are many different geometry types build into ggplot2 and even more from additional packages. The functions to create the geometry layers usually start with geom_. The geom functions also have their own arguments you can specify. geom_point geom_line geom_boxplot geom_histogram … ggplot(species, aes(x = AraInd))+ geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(species, aes(x = AraInd))+ geom_histogram(binwidth = 10, fill = &quot;darkgreen&quot;, color = &quot;black&quot;) Different geometry types require more than one aesthetic. E.g. geom_point needs the x and y aesthetics. ggplot(species, aes(x = Croptype, y = AraInd))+ geom_point() 15.1.3 Axis Formats The Axis format depends on the type of variable you want to plot. We have to be aware of what scale type we have. discrete scale for categorical data continuous scale for numeric data limits, ticks, labels … ggplot(species, aes(x = Croptype, y = AraInd))+ geom_point(size = 4, alpha = 0.8, shape = 18)+ scale_x_discrete(labels = c(&quot;KE&quot; = &quot;Grain Pea&quot;, &quot;SM&quot; = &quot;Silage Maize&quot;, &quot;WR&quot; = &quot;Winter Oilseed Rape&quot;, &quot;WW&quot; = &quot;Winter Wheat&quot;, &quot;ZR&quot; = &quot;Sugar Beet&quot;))+ scale_y_continuous(name = &quot;Aranae [n]&quot;, limits = c(0,200)) We can also save the plot to a object to reuse and modify it later. araind_plot = ggplot(species, aes(x = Croptype, y = AraInd))+ geom_point(size = 4, alpha = 0.8, shape = 18)+ scale_x_discrete(labels = c(&quot;KE&quot; = &quot;Grain Pea&quot;, &quot;SM&quot; = &quot;Silage Maize&quot;, &quot;WR&quot; = &quot;Winter Oilseed Rape&quot;, &quot;WW&quot; = &quot;Winter Wheat&quot;, &quot;ZR&quot; = &quot;Sugar Beet&quot;))+ scale_y_continuous(name = &quot;Aranae [n]&quot;, limits = c(0,200)) araind_plot + ggtitle(&quot;Aranae [n] per crop type&quot;) 15.1.4 Color Scales With the color and fill arguments in aes() we specify which columns of the data.frame should be represented as a color scale in the plot. ggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+ geom_point(size = 4, alpha = 0.8, shape = 18)+ scale_x_discrete(name = &quot;Crop Type&quot;)+ scale_y_continuous(name = &quot;Aranae [n]&quot;, limits = c(0,200)) We can specify the colors by adding a scale_color_ layer. Just like with the axis, there are discrete and continuous color scales available! ggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+ geom_point(size = 4, alpha = 0.8, shape = 18)+ scale_color_gradient(name = &quot;Aranae\\nSpecies [n]&quot;, low = &quot;yellow&quot;, high = &quot;red&quot;)+ scale_x_discrete(name = &quot;Crop Type&quot;)+ scale_y_continuous(name = &quot;Aranae [n]&quot;, limits = c(0,200)) 15.1.5 Themes There are many prebuild themes… ggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+ geom_point(size = 4, alpha = 0.8, shape = 18)+ scale_color_gradientn(name = &quot;Aranae\\nSpecies [n]&quot;,colors = mako(50))+ scale_x_discrete(name = &quot;Crop Type&quot;)+ scale_y_continuous(name = &quot;Aranae [n]&quot;, limits = c(0,200))+ theme_minimal() … or you can specify your own: ggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+ geom_point(size = 4, alpha = 0.8, shape = 18)+ scale_color_gradientn(name = &quot;Aranae\\nSpecies [n]&quot;,colors = mako(50))+ scale_x_discrete(name = &quot;Crop Type&quot;)+ scale_y_continuous(name = &quot;Aranae [n]&quot;, limits = c(0,200), expand = c(0,0))+ theme(panel.background = element_blank(), panel.grid.major.y = element_line(color = &quot;black&quot;, linetype = &quot;dotted&quot;), axis.line = element_line(color = &quot;black&quot;)) 15.2 TASK: Publication ready figures Create the following plots: Boxplots of the Aranae Species per crop type. Plot the Carabidae Individuums vs. the Carabidae Species and color the points based on the crop on the field. Create a map of the trees in Münster (with ggplot only!). Create a “heatmap” of the trees in Münster (geom_bin_2d or geom_hex) A bar plot (geom_col) of the Top 10 districts of Münster with the most trees. A time series of the oxygen content in the Aasee with Hint: Use lubridate::ymd_hm() to convert the date into a useful format. 3.1 a horizontal line indicating critical oxygen concentrations of 4 mg/l 3.2 color the line based on the temperature values. Use an appropriate color scale. 15.3 Solution Click for Answer 15.3.1 Boxplots of the Aranae Species per crop type. library(ggplot2) cropspecies = read.csv(&quot;data/crop_species.csv&quot;) ggplot(data = cropspecies, mapping = aes(x = Croptype, y = AraSpec, fill = Croptype))+ geom_boxplot()+ scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;)) ## Define colors beforehand sc = c(&quot;KE&quot; = &quot;#66CD00&quot;, &quot;ZR&quot; = &quot;#FFB90F&quot;, &quot;SM&quot; = &quot;#FF7F00&quot;, &quot;WR&quot; = &quot;yellow&quot;, &quot;WW&quot; = &quot;black&quot;) ggplot(data = cropspecies, mapping = aes(x = Croptype, y = AraSpec, fill = Croptype))+ geom_boxplot()+ scale_fill_manual(values = sc) 15.3.2 Plot the Carabidae Individuums vs. the Carabidae Species and color the points based on the crop on the field. ggplot(cropspecies, aes(x = CaraInd, y = CaraSpec))+ geom_point()+ geom_smooth(method = &quot;lm&quot;)+ geom_point(aes(color = Croptype)) ## `geom_smooth()` using formula &#39;y ~ x&#39; 15.3.3 Create a map of the trees in Münster + Heatmap trees = read.csv(&quot;data/muenster_trees.csv&quot;) ggplot(trees, aes(x = X, y = Y))+ geom_point(alpha = 0.5) ggplot(trees, aes(x = X, y = Y))+ geom_bin_2d(bins = 40) ggplot(trees, aes(x = X, y = Y))+ geom_hex()+ theme_bw() 15.3.4 A bar plot (geom_col) of the Top 10 districts of Münster with the most trees. districts = table(trees$district) districts = as.data.frame(districts) districts = districts[order(districts$Freq, decreasing = TRUE),] districts_t10 = districts[seq(10),] ggplot(districts_t10, aes(y = reorder(Var1, Freq), x = Freq))+ geom_col() 15.3.5 A time series of the oxygen content in the Aasee library(lubridate) ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union aasee = read.csv(&quot;data/2021-07_aasee.csv&quot;) aasee$Datum = lubridate::ymd_hm(aasee$Datum) ggplot(aasee, aes(x = Datum, y = Sauerstoffgehalt, color = Wassertemperatur))+ geom_line()+ geom_abline(slope = 0, intercept = 1, color = &quot;red&quot;)+ scale_x_datetime(name = &quot;Datum&quot;)+ annotate(geom = &quot;text&quot;, label = &quot;Text&quot;, x = lubridate::ymd_hm(&quot;2021-07-01 02:00&quot;), y = 4)+ scale_color_gradientn(colors = viridis::inferno(50)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
