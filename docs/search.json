[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of Ecological Data",
    "section": "",
    "text": "Welcome\nLandscape Ecology with R"
  },
  {
    "objectID": "index.html#target-audience",
    "href": "index.html#target-audience",
    "title": "Analysis of Ecological Data",
    "section": "Target audience",
    "text": "Target audience\n\nYou want answers to questions (in landscape ecology)!\nPrimarily ecologists but the methods and skills are useful in many fields.\nNo R knowledge is required (or other programming skills)\nIt is helpful if you know what a spreadsheet is\nMinimum amount of statistic needed (course explains all the necessary stuff)"
  },
  {
    "objectID": "index.html#aims-of-this-course",
    "href": "index.html#aims-of-this-course",
    "title": "Analysis of Ecological Data",
    "section": "Aims of this course",
    "text": "Aims of this course\n\nDeveloping ideas, answering questions\nDefining steps how to solve a problem\nTranslating these steps into R code\nLearning the necessary R language on the way\nData handling. A lot of data handling.\nI believe a good understanding of data is one of the most important things in science and work.\nLearn statistics. Use statistics as a tool."
  },
  {
    "objectID": "index.html#what-this-course-is-not",
    "href": "index.html#what-this-course-is-not",
    "title": "Analysis of Ecological Data",
    "section": "What this course is not",
    "text": "What this course is not\n\nstatistics as in mathematical equations\n\n\\[\n\\left( {\\begin{array}{*{20}c}\n   n  \\\\\n   k  \\\\\n\\end{array}} \\right) = \\frac{{n!}}{{k!\\left( {n - k} \\right)!}}\n\\]\n\\[\n\\sigma ^2  = \\mu _2  = \\sum {\\left( {x - \\mu _1 } \\right)^2 P\\left( x \\right)}\n\\]\n\nR as in computer science\nYou probably won’t find out anything you didn’t already know about nature"
  },
  {
    "objectID": "index.html#course-outline",
    "href": "index.html#course-outline",
    "title": "Analysis of Ecological Data",
    "section": "Course Outline",
    "text": "Course Outline\n\nSummary and Exercises from last week\nNew Input\nExercises\nStudienleistung: 10 assignments - Passed with 6 assignments &gt; 50%\n\n\n\n\nCourse Outline\n\n\n\n\n\n\nDate\nContent\n\n\n\n\n06.04.\nOrganization - Topic Overview - What is R? - What is ecological data?\n\n\n13.04.\nR foundations I - functions - vectors - data.frames\n\n\n20.04.\nR foundations II - R Projects - data.frames\n\n\n27.04.\nAasee water monitoring - tidyverse - strings\n\n\n04.05.\nAasee water monitoring - correlations\n\n\n11.05.\nAasee water monitoring - linear models\n\n\n18.05.\n—- Feiertag —-\n\n\n25.05.\nBuffer\n\n\n02.06.\n—- Pfingstferien —-\n\n\n08.06.\n—- Feiertag —-\n\n\n15.06.\nBiodiversity Data\n\n\n22.06.\nBiodiversity Data\n\n\n29.06.\nVisualizations - ggplot\n\n\n06.07.\nVisualizations - ggplot\n\n\n13.07.\nWrap up"
  },
  {
    "objectID": "D01_data_examples.html#plot-surveys",
    "href": "D01_data_examples.html#plot-surveys",
    "title": "D01: Ecological data",
    "section": "Plot surveys",
    "text": "Plot surveys\n\nplots with ID and surveyed environmental information\nbread and butter of ecology\n\n\n\n\nField survery data on a plot level\n\n\nplotID\nsoil_ph\nsoil_temperature\nforest_type\n\n\n\n\nP1\n5.5\n10\nconiferous\n\n\nP2\n5.4\n11\nconiferous\n\n\nP3\n6.1\n12\ndeciduous"
  },
  {
    "objectID": "D01_data_examples.html#time-series",
    "href": "D01_data_examples.html#time-series",
    "title": "D01: Ecological data",
    "section": "Time Series",
    "text": "Time Series\n\n\n\n\n\nVisualization of time series data\n\n\n\n\n\ncontinuous measurements\nmeasurement interval flexible\nmainly climate, soil, remote sensing\n\n\n\n\nTime series data: Aasee sensor measurements\n\n\ndate\ntemperature\nph\no2\n\n\n\n\n2021-06-01\n18.06\n8.12\n11.06\n\n\n2021-06-01\n18.08\n8.10\n10.62\n\n\n2021-06-01\n17.93\n8.15\n11.20\n\n\n2021-06-01\n17.78\n8.19\n11.92\n\n\n2021-06-01\n17.79\n8.13\n11.39"
  },
  {
    "objectID": "D01_data_examples.html#species-lists",
    "href": "D01_data_examples.html#species-lists",
    "title": "D01: Ecological data",
    "section": "Species Lists",
    "text": "Species Lists\n\nmostly plot based\nmonitoring of conservation sites\nbiodiversity assessment\n\n\n\n\nSpecies Lists: Occurence on a plot\n\n\nspecies\nn\n\n\n\n\nDigitalis purpurea\n4\n\n\nGalium odoratum\n25\n\n\nFagus Sylvatica\n20\n\n\n…\n…\n\n\n\n\n\n\nWhat are the differences between the plot based survey example and the species list example?"
  },
  {
    "objectID": "D01_data_examples.html#geospatial-data",
    "href": "D01_data_examples.html#geospatial-data",
    "title": "D01: Ecological data",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\ndefined by explicit location on the earth surface\ninformation attached to coordinates\n\n\n\n\nGeospatial Data: Tree locations\n\n\n\n\n\n\n\n\n\n\ntree_id\neasting\nnorthing\nspecies_code\ndbh\ngeom\n\n\n\n\nr00430\n477422.4\n5631970\nBUR\n0.12\nPOINT (477422.4 5631970)\n\n\nr01106\n477411.7\n5631946\nBUR\n0.68\nPOINT (477411.7 5631946)\n\n\nb00818\n477796.0\n5632316\nBUR\n0.23\nPOINT (477796 5632316)\n\n\nr00170\n477816.9\n5632201\nEIT\n0.59\nPOINT (477816.9 5632201)\n\n\nr00334\n477737.2\n5632250\nERS\n0.68\nPOINT (477737.2 5632250)"
  },
  {
    "objectID": "D01_data_examples.html#want-more",
    "href": "D01_data_examples.html#want-more",
    "title": "D01: Ecological data",
    "section": "Want more?",
    "text": "Want more?\n\n\n\nTurner (2014) : Sensing Biodiversity\n\n\n\nAnimal movement data\nLab / Field experiments\nIndividuum based information (e.g. traits)\nCamera Traps\nSocio-Economic data (also useful for landscape ecology)\n…\n\n\n\n\n\nTurner, W. 2014. “Sensing Biodiversity.” Science 346 (6207): 301–2. https://doi.org/10.1126/science.1256014."
  },
  {
    "objectID": "D02_aasee.html#case-study-level-1-basic-comparisons",
    "href": "D02_aasee.html#case-study-level-1-basic-comparisons",
    "title": "D02: The Aasee Dataset",
    "section": "Case Study Level 1: Basic Comparisons",
    "text": "Case Study Level 1: Basic Comparisons\nAs a first intermediate goal we want to deal with the following task. We will learn all the necessary skills in R and a bit of statistics in the next lessons, but it is valuable to think about the task / question beforehand!\n\nCompare the water temperature of 2022 April and 2022 May.\n\n\nWhat does this task actually mean? What possibilities do we have?\nOutline steps to answer the question"
  },
  {
    "objectID": "D02_aasee.html#case-study-level-2-aasee-critical-oxygen-concentrations",
    "href": "D02_aasee.html#case-study-level-2-aasee-critical-oxygen-concentrations",
    "title": "D02: The Aasee Dataset",
    "section": "Case Study Level 2: Aasee Critical Oxygen Concentrations",
    "text": "Case Study Level 2: Aasee Critical Oxygen Concentrations\nIn 2018, more than twenty tons of fish died in the Aasee due to low oxygen concentrations: https://www.uni-muenster.de/news/view.php?cmdid=9768.\nBased on this event, a reasonable question might be:\n\nOn how many days of 2022 does the Aasee reach critical oxygen concentrations (4 mg/l)?\n\n\nDefine the necessary steps!\nWork in your project environment!\nHow could a good visualization of this look like?"
  },
  {
    "objectID": "D02_aasee.html#case-study-level-3-temperature-and-oxygen",
    "href": "D02_aasee.html#case-study-level-3-temperature-and-oxygen",
    "title": "D02: The Aasee Dataset",
    "section": "Case Study Level 3: Temperature and Oxygen",
    "text": "Case Study Level 3: Temperature and Oxygen\nThe oxygen concentration in water is partly based on the water temperature. An idealized relation between Oxygen and Temperature might look like this:\n\n\n\nhttps://www.garnelenhaus.de/media/image/2f/30/57/Ricardo-Castellanos-Sauerstoff-Grafik.jpg\n\n\nWe want to find out if this holds true for the Aasee.\n\nFormulate a hypothesis.\n\n\nAggregate temperature and oxygen to daily means.\nVisualize the relation between temperature and oxygen in the Aasee.\nInterpret this visualization!"
  },
  {
    "objectID": "D03_project_setup.html#r-studio-projects",
    "href": "D03_project_setup.html#r-studio-projects",
    "title": "D03: Project Setup",
    "section": "R studio Projects",
    "text": "R studio Projects\nHere is an example from a blog entry at r-bloggers.com\n\n\n\nA good starting point for project setup\n\n\nInside a project, you can then use relative paths to files.\n\n# Example of absolute path\n\n## Linux\n\"/home/marvin/projects/rcourse/session02/data/file.csv\"\n\n## Windows\n\"C:\\Users\\Marvin\\Dokumente\\rcourse\\session02\\data\\file.csv\"\n\n# If the R project is set up in the \"session02\" directory we can use relative paths:\n\n# relative path to project root\ndata = read.csv(\"data/file.csv\")\n\nAdditional thoughts\n\nalways keep raw data\nbackups!\nfilepaths:\n\nno spaces\nno dots\nno weird characters\n\nHow to name files\nWindows uses backslash \\, R wants forward slash /\nyou can use the dir.create function to create a new empty directory"
  },
  {
    "objectID": "R01_introduction.html#r-code",
    "href": "R01_introduction.html#r-code",
    "title": "R01: What is R?",
    "section": "R Code",
    "text": "R Code\nHow R code looks like:\n\ndata &lt;- c(12, 45, 65, 1, 3, 87)\nmean(data)\n\ndata &lt;- data + 5\nsort(data)\n\nHow R code looks like with output:\n\ndata &lt;- c(12, 45, 65, 1, 3, 87)\nmean(data)\n\n[1] 35.5\n\ndata &lt;- data + 5\nsort(data)\n\n[1]  6  8 17 50 70 92"
  },
  {
    "objectID": "R01_introduction.html#why-r",
    "href": "R01_introduction.html#why-r",
    "title": "R01: What is R?",
    "section": "Why R?",
    "text": "Why R?\n\nEasy to get into (although it might not feel that way at first)\nDesigned for solving scientific problems\nBig community - Getting help is really easy.\nOpen-source, active development\n\n\nThe R package structure has been the key addition to the software - J. Chambers M. (2020)\n\n\nExpandable with packages provided by other R users\n\nSpecialized analysis for specific fields\nMachine Learning\nMedicine\nWriting Books\n…\n\nUsed in science, industry, healthcare, NGOs, …\n\n\n\n\nSlater et al. (2019) : Workflow with R packages"
  },
  {
    "objectID": "R01_introduction.html#rstudio",
    "href": "R01_introduction.html#rstudio",
    "title": "R01: What is R?",
    "section": "Rstudio",
    "text": "Rstudio\n\nIntegrated Development Environment (IDE)\nMakes R “convenient” to use\nText Editor + R Console\nProject Environments, Package Management, Help Pages, Plot Viewer, File Browser …"
  },
  {
    "objectID": "R01_introduction.html#task-r-and-rstudio",
    "href": "R01_introduction.html#task-r-and-rstudio",
    "title": "R01: What is R?",
    "section": "TASK: R and Rstudio",
    "text": "TASK: R and Rstudio\n\nOpen R studio and get familiar with the interface.\nCreate a new, empty R script.\nWhat is the difference between the script editor and the console?\nCopy the code below into the R script and run it line by line. Try to understand what each line does.\n\n\na &lt;- 5\nb &lt;- 10\n\na + b\n\np &lt;- a-b\n\nv &lt;- c(3,12,6,9,23)\nv\n\nv / b\n\nmean(v)\n# sum(v)\n\n\nQuestions you might have\n\nWhy does p &lt;- a*b not produce an output?\nWhat is c()?\nWhy does # sum(v) not work?\n\n\nEverything that exists in R is an object. Everything that happens in R is a function call. - J. M. Chambers (2016)\n\n\n\n\n\nChambers, John M. 2016. Extending R. The R Series. Boca Raton, Fla. London New York: CRC Press, Taylor & Francis Group.\n\n\nChambers, John, M. 2020. “S, R, and Data Science.” The R Journal 12 (1): 462. https://doi.org/10.32614/RJ-2020-028.\n\n\nSlater, Louise J., Guillaume Thirel, Shaun Harrigan, Olivier Delaigue, Alexander Hurley, Abdou Khouakhi, Ilaria Prosdocimi, Claudia Vitolo, and Katie Smith. 2019. “Using R in Hydrology: A Review of Recent Developments and Future Directions.” Hydrology and Earth System Sciences 23 (7): 2939–63. https://doi.org/10.5194/hess-23-2939-2019."
  },
  {
    "objectID": "R02_basics.html#variables",
    "href": "R02_basics.html#variables",
    "title": "R02: The very basics",
    "section": "Variables",
    "text": "Variables\n\nassign values to variables either with &lt;- or =\nvariable on the left, assigned value on the right\nYou decide how to name a variable.\n\nUse recognizable names!\nDon’t be lazy. Longer, descriptive names help immensely.\n\n\n\na &lt;- 5\nb = 10\n\na_big_number = 500000"
  },
  {
    "objectID": "R02_basics.html#values",
    "href": "R02_basics.html#values",
    "title": "R02: The very basics",
    "section": "Values",
    "text": "Values\n\nHow is data represented in R?\nTypes we need right now:\n\nnumeric\ncharacter (string / text)\nlogical\n“nothing”\n\n\n\n# numeric\n1\n68542\n4.5\n\n\n# character\n\"f\"\n\"Hi Mom!\"\n\n# logical\nTRUE\nF\n\n# nothing\nNA # there should be something, but it is missing\nNULL # truly nothing"
  },
  {
    "objectID": "R02_basics.html#functions",
    "href": "R02_basics.html#functions",
    "title": "R02: The very basics",
    "section": "Functions",
    "text": "Functions\n\nEverything you do in R is a function!\nEasily identified by function name followed by parenthesis (), e.g. print()\nfor common functions there are shortcuts\n\n\n# the class() function returns the type of the input\na &lt;- 5\nclass(a)\n\n[1] \"numeric\"\n\n# the nchar() function returns the number of characters in a string\nnchar(\"Hi Mom\")\n\n[1] 6\n\n# Really everything you do in R is a function!\n`&lt;-`(b, 10)\nprint(b)\n\n[1] 10\n\n\n\nmost functions need arguments\ninput, options, parameters to specify what the function should do\neach function has a help page where you can read about arguments\n\nFor example, the cos() function computes the cosine of a number. The help page specifies what the function expects as an input. You can access the help page with ?cos() or by searching for the function in the ‘Help’ tab in Rstudio (bottom right panel).\n\n# the cos function needs the argument x of type numeric\ncos(x = 0)\n\n[1] 1\n\n# it throws an error otherwise\ncos(x = \"3.14\")\n\nError in cos(x = \"3.14\"): non-numeric argument to mathematical function\n\n# argument names can be neglected\ncos(1)\n\n[1] 0.5403023"
  },
  {
    "objectID": "R03_vectors.html#vector-maths",
    "href": "R03_vectors.html#vector-maths",
    "title": "R03: Vectors",
    "section": "Vector Maths",
    "text": "Vector Maths\n\n\n\n\n\nR vector addition\n\n\n\n\n\nmost of the functions in R are “vectorised”\ni.e. functions are applied to all the elements in a vector\n\n\nvec1 = c(23, 1, 60, 21, 21, 5)\nvec1 + 6\n\n[1] 29  7 66 27 27 11\n\nvec2 = c(5, 1000, 5, 1000, 5, 1000)\nvec1 - vec2\n\n[1]   18 -999   55 -979   16 -995\n\n\n\n\n\n\n\nR vector multiplication, different length\n\n\n\n\n\n# be careful with vectors of different length!\nvec3 = c(1, 2, 1)\nvec1 * vec3\n\n[1] 23  2 60 21 42  5\n\nvec4 = c(1, 2, 1, 2)\nvec1 * vec4\n\n[1] 23  2 60 42 21 10"
  },
  {
    "objectID": "R03_vectors.html#vectors-and-functions",
    "href": "R03_vectors.html#vectors-and-functions",
    "title": "R03: Vectors",
    "section": "Vectors and functions",
    "text": "Vectors and functions\nThe vector below are the temperature values for the Aasee in Münster from the 2021-06-02.\n\ntemperature &lt;- c(18.81,18.73,18.92,18.87,18.76,18.79,18.87,18.84,18.89,18.89,\n                 18.93,18.95,18.92,18.97,19.00,18.99,19.00,19.00,18.99,19.00,\n                 18.98,18.97,18.97,18.97,18.97,18.98,18.96,18.94,18.94,18.91,\n                 18.90,18.89,18.87,18.85,18.85,18.84,18.83,18.81,18.81,18.81,\n                 18.81,18.81,18.80,18.79,18.80,18.79,18.79,18.78,18.77,18.78,\n                 18.79,18.79,18.79,18.79,18.79,18.79,18.80,18.79,18.81,18.80,\n                 18.81,18.81,18.82,18.84,18.87,18.89,18.89,18.91,18.96,19.02,\n                 19.11,19.15,18.95,18.92,18.84,18.85,18.96,18.92,18.95,18.95,\n                 18.91,19.00,19.02,19.06,19.05,19.47,19.32,19.05,19.66,19.57,\n                 19.23,19.42,19.36,19.66,19.79,19.81,19.99,21.10,21.94,22.52,\n                 22.81,22.43,22.16,21.55,21.80,21.02,21.85,21.45,22.48,22.73,\n                 22.61,22.83,20.85,20.68,19.76,19.81,19.74,19.58,19.35,19.40,\n                 19.75,19.76,19.85,19.82,19.86,20.08,20.06,19.85,20.04,19.90,\n                 19.96,20.12,19.94,20.20,20.17,20.31,20.17,20.37,20.36,20.13)"
  },
  {
    "objectID": "R03_vectors.html#subsetting",
    "href": "R03_vectors.html#subsetting",
    "title": "R03: Vectors",
    "section": "Subsetting",
    "text": "Subsetting\nFor many questions it is often required to access only parts of the data. This is one of the most common things you have to deal with in R.\n\nIndexing\nTo access single values of a vector, use square brackets [].\n\n# get the third value of the vector\ntemperature[3]\n\n[1] 18.92\n\n# accessing multiple elements at once\ntemperature[1,2]\n\nError in temperature[1, 2]: incorrect number of dimensions\n\ntemperature[c(1,2)]\n\n[1] 18.81 18.73\n\n\n\nUsing the functions above, what is an easy way to access the first 10 elements of the vector?\n\n\n\nLogical Operators\n\n\n\n\n\nR vector logical operation\n\n\n\n\nA more powerful way to subset a vector is by using logical operators. These functions usually return a boolean object (TRUE, FALSE) which can then be used to access certain values.\n\n1 &gt; 2\n\n[1] FALSE\n\n1 &lt; 2\n\n[1] TRUE\n\n1 == 2\n\n[1] FALSE\n\nmax(temperature) &gt; 22\n\n[1] TRUE\n\ntemperature &gt; 20\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[109]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE\n[133] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\nhot = temperature &gt; 20\n\ntemperature[hot]\n\n [1] 21.10 21.94 22.52 22.81 22.43 22.16 21.55 21.80 21.02 21.85 21.45 22.48\n[13] 22.73 22.61 22.83 20.85 20.68 20.08 20.06 20.04 20.12 20.20 20.17 20.31\n[25] 20.17 20.37 20.36 20.13"
  },
  {
    "objectID": "R04_dataframes.html#csv-files",
    "href": "R04_dataframes.html#csv-files",
    "title": "R04: Dataframes",
    "section": "CSV Files",
    "text": "CSV Files\nDataframes can be loaded from and saved to .csv files.\n\nComma Separated Values\nCaution: In Germany “,” is used as the decimal point. You often find “;” as the delimiter in csvs.\nCaution: If you open csv files in Excel, things can get messy\n\nDatum,Wassertemperatur,pH-Wert,Sauerstoffgehalt\n2021-05-31 23:57,17.98,8.05,10.53\n2021-06-01 00:09,17.66,8.04,9.64\n2021-06-01 00:19,18.03,8.12,11.30\n2021-06-01 00:27,18.08,8.14,11.32\n2021-06-01 00:39,18.06,8.12,11.06\n2021-06-01 00:49,18.01,8.10,10.91\n\nuse the read.csv function\nmake sure the dec and sep parameters of the function are properly set\nwhen in doubt look at the help page ?read.csv\n\n\ndata = read.csv(file = \"data/2021-06_aasee.csv\", dec = \".\", sep = \",\")\n\n\n# show the first few rows of the df\nhead(data)\n\n             Datum Wassertemperatur pH.Wert Sauerstoffgehalt\n1 2021-05-31 23:57            17.98    8.05            10.53\n2 2021-06-01 00:09            17.66    8.04             9.64\n3 2021-06-01 00:19            18.03    8.12            11.30\n4 2021-06-01 00:27            18.08    8.14            11.32\n5 2021-06-01 00:39            18.06    8.12            11.06\n6 2021-06-01 00:49            18.01    8.10            10.91\n\n# show the last few rows of the df\ntail(data)\n\n                Datum Wassertemperatur pH.Wert Sauerstoffgehalt\n4220 2021-06-30 22:57            23.73    8.78            17.80\n4221 2021-06-30 23:09            23.70    8.72            17.66\n4222 2021-06-30 23:18            23.68    8.73            17.72\n4223 2021-06-30 23:29            23.64    8.81            18.38\n4224 2021-06-30 23:39            23.62    8.76            17.93\n4225 2021-06-30 23:49            23.63    8.77            17.82\n\n# get a short summary of the structure\nstr(data)\n\n'data.frame':   4225 obs. of  4 variables:\n $ Datum           : chr  \"2021-05-31 23:57\" \"2021-06-01 00:09\" \"2021-06-01 00:19\" \"2021-06-01 00:27\" ...\n $ Wassertemperatur: num  18 17.7 18 18.1 18.1 ...\n $ pH.Wert         : num  8.05 8.04 8.12 8.14 8.12 8.1 8.1 8.1 8.1 8.1 ...\n $ Sauerstoffgehalt: num  10.53 9.64 11.3 11.32 11.06 ...\n\n\n\n\n\n\nChambers, John, M. 2020. “S, R, and Data Science.” The R Journal 12 (1): 462. https://doi.org/10.32614/RJ-2020-028."
  },
  {
    "objectID": "R05_tidyverse.html#dplyr",
    "href": "R05_tidyverse.html#dplyr",
    "title": "R05: Tidyverse functions",
    "section": "dplyr",
    "text": "dplyr\n\nprovides functions for dataframe manipulation\ncan complement or replace base R functions\n\n\n\n\nhttps://biostat2.uni.lu/lectures/img/06/vaudor_dplyr_schema.png\n\n\n\nlibrary(dplyr)\naasee = read.csv(\"data/2021-06_aasee.csv\")\n\n# slice - gives back a slice of data - i.e. the specified rows\naasee = slice(aasee, seq(8))\n\n\n# select - selects columns\nselect(aasee, Wassertemperatur)\n\n  Wassertemperatur\n1            17.98\n2            17.66\n3            18.03\n4            18.08\n5            18.06\n6            18.01\n7            18.02\n8            18.06\n\n# filter - filters rows based on logical operators\nfilter(aasee, Wassertemperatur &lt; 18)\n\n             Datum Wassertemperatur pH.Wert Sauerstoffgehalt\n1 2021-05-31 23:57            17.98    8.05            10.53\n2 2021-06-01 00:09            17.66    8.04             9.64\n\n# mutate - mutates the data.frame by adding columns\nmutate(aasee, t_kelvin = Wassertemperatur + 273.15)\n\n             Datum Wassertemperatur pH.Wert Sauerstoffgehalt t_kelvin\n1 2021-05-31 23:57            17.98    8.05            10.53   291.13\n2 2021-06-01 00:09            17.66    8.04             9.64   290.81\n3 2021-06-01 00:19            18.03    8.12            11.30   291.18\n4 2021-06-01 00:27            18.08    8.14            11.32   291.23\n5 2021-06-01 00:39            18.06    8.12            11.06   291.21\n6 2021-06-01 00:49            18.01    8.10            10.91   291.16\n7 2021-06-01 00:59            18.02    8.10            10.96   291.17\n8 2021-06-01 01:08            18.06    8.10            10.83   291.21\n\n# summarise - summarises data\nsummarise(aasee, minimum_t = min(Wassertemperatur))\n\n  minimum_t\n1     17.66\n\n\nThe functions itself could all be realized with base R functions:\n\n# the same in base R\n\n# select\naasee$Wassertemperatur\n\n[1] 17.98 17.66 18.03 18.08 18.06 18.01 18.02 18.06\n\n# filter\naasee[,aasee$Wassertemperatur &lt; 18]\n\n             Datum Wassertemperatur\n1 2021-05-31 23:57            17.98\n2 2021-06-01 00:09            17.66\n3 2021-06-01 00:19            18.03\n4 2021-06-01 00:27            18.08\n5 2021-06-01 00:39            18.06\n6 2021-06-01 00:49            18.01\n7 2021-06-01 00:59            18.02\n8 2021-06-01 01:08            18.06\n\n# mutate\naasee$t_kelvin = aasee$Wassertemperatur + 273.15\n\n# summarise\nmin(aasee$Wassertemperatur)\n\n[1] 17.66\n\n\nThe strength of dplyr is the possibility to chain functions with %&gt;% or |&gt;.\n\naasee|&gt; \n    filter(Wassertemperatur &lt; 18) |&gt; \n    select(pH.Wert) |&gt;  \n    max()\n\n[1] 8.05\n\n\nWith base R functions this looks messy, because we have to use functions inside functions.\n\nmax(aasee$pH.Wert[aasee$Wassertemperatur &lt; 18])\n\n[1] 8.05"
  },
  {
    "objectID": "R06_strings.html#the-stringr-package",
    "href": "R06_strings.html#the-stringr-package",
    "title": "R06: String handling",
    "section": "The stringr package",
    "text": "The stringr package\nFor advanced string handling we will make our lives easier by using the stringr package.\nTo use functions from a package we have to load it first with the library function. The first time you want to use a package you might have to install it first with install.packages.\n\ninstall.packages(\"stringr\")\n\nlibrary(stringr)\n\nMany packages have so called vignettes which are tutorial style help pages about the package. You can access vignettes via the “Packages” Pane in R studio or with a quick Google search.\nIt is a good idea to go over the vignette when using a new package.\n\ns = \"Hi Mom!\"\n\n# you can indicate in your script from which package a function comes from\n# by using ::\nstringr::str_length(s)\n\n[1] 7\n\nstr_sub(string = s, start = 1, end = 2)\n\n[1] \"Hi\"\n\n# vectorized:\nstring_vector = paste(seq(12), \"is\", c(\"odd\", \"even\"))\nstring_vector\n\n [1] \"1 is odd\"   \"2 is even\"  \"3 is odd\"   \"4 is even\"  \"5 is odd\"  \n [6] \"6 is even\"  \"7 is odd\"   \"8 is even\"  \"9 is odd\"   \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\"\n\nstr_remove(string_vector, pattern = \"is \")\n\n [1] \"1 odd\"   \"2 even\"  \"3 odd\"   \"4 even\"  \"5 odd\"   \"6 even\"  \"7 odd\"  \n [8] \"8 even\"  \"9 odd\"   \"10 even\" \"11 odd\"  \"12 even\"\n\n# stringr functions are part of the tidyverse\n# pipes work:\nstring_vector |&gt; str_replace(pattern = \" is\", replacement = \":\")\n\n [1] \"1: odd\"   \"2: even\"  \"3: odd\"   \"4: even\"  \"5: odd\"   \"6: even\" \n [7] \"7: odd\"   \"8: even\"  \"9: odd\"   \"10: even\" \"11: odd\"  \"12: even\"\n\n\n\nPattern matching\nPattern matching are logical operators for strings.\n\nstr_detect(string_vector, pattern = \"odd\")\n\n [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\nstr_which(string_vector, pattern = \"even\")\n\n[1]  2  4  6  8 10 12\n\nstr_starts(string_vector, pattern = \"1\")\n\n [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\nstr_count(string_vector, pattern = \"1\")\n\n [1] 1 0 0 0 0 0 0 0 0 1 2 1\n\n\n\n\nLeading Zeros\nstr_pad one can be quite important to keep you sane.\n\nstring_vector = paste(seq(15), \"is\", c(\"odd\", \"even\"))\nstring_vector\n\n [1] \"1 is odd\"   \"2 is even\"  \"3 is odd\"   \"4 is even\"  \"5 is odd\"  \n [6] \"6 is even\"  \"7 is odd\"   \"8 is even\"  \"9 is odd\"   \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\" \"13 is odd\"  \"14 is even\" \"15 is odd\" \n\nstring_vector_pad = paste(str_pad(seq(15), width = 2, pad = 0, side = \"left\"),\n                          \"is\",\n                          c(\"odd\", \"even\"))\nstring_vector_pad\n\n [1] \"01 is odd\"  \"02 is even\" \"03 is odd\"  \"04 is even\" \"05 is odd\" \n [6] \"06 is even\" \"07 is odd\"  \"08 is even\" \"09 is odd\"  \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\" \"13 is odd\"  \"14 is even\" \"15 is odd\""
  },
  {
    "objectID": "exercise/E01-variablen.html#variablen",
    "href": "exercise/E01-variablen.html#variablen",
    "title": "E01: Variablen, Funktionen",
    "section": "Variablen",
    "text": "Variablen\n\nErstelle eine Variable die die Zahl 1650 enthält.\nErstelle eine Variable die die Zahl 140 enthält.\nErstelle eine Variable die die Zahl 5 enthält.\nBerechne das Produkt deiner erstellten Variablen.\nBerechne den Mittelwert deiner erstellten Variablen.\n\n\n\nSolution\na = 1650\nb = 140\nc &lt;- 5\n\na*b*c\n\nhilfsvektor = c(a,b,c)\nmean(hilfsvektor)\n\n\n\nErstelle eine Variable die deinen Vornamen enthält.\nErstelle eine Variable die deinen Nachnamen enthält.\nDie paste Funktion kann Texte zusammenfügen. Probiere die Funktion mit den Variablen die deine Namen enthalten aus.\n\n\n\nSolution\nvorname = \"Marvin\"\nnachname = \"Ludwig\"\n\npaste(vorname, nachname)"
  },
  {
    "objectID": "exercise/E01-variablen.html#funktionen",
    "href": "exercise/E01-variablen.html#funktionen",
    "title": "E01: Variablen, Funktionen",
    "section": "Funktionen",
    "text": "Funktionen\n\nVektoren in R sind Folgen von Werten, enthalten also z.B. mehrere Zahlen. Sie werden mit der Funktion c() erstellt:\n\n\nnumbers = c(4, 3, 8, 90, 16)\nnumbers\n\n\nTeste die Funktionen length(), sum(), sqrt(), und min() mit dem Vektor.\nWas macht die sqrt() Funktion?\nWas ist der Unterschied zwischen der max() Funktion und der which.max() Funktion?\n\n\n\nSolution\nlength(numbers)\nsum(numbers)\nsqrt(numbers) # Squareroot, Quadratwurzel (vektorisiert, d.h. fuer jedes Element)\nmax(numbers) # maximaler Wert im Vektor\nwhich.max(numbers) # Position (Index) des maximalen Wertes im Vektor\n\n\n\nDie seq() Funktion erzeugt einen Vektor der Zahlenfolgenfolgen enthält. Sieh dir die Hilfeseite von seq() an und erstelle einen Vektor der alle 100er Zahlen von 0 bis 10000 enthält (also 0, 100, 200, … ,9900, 10000).\n\n\n\nSolution\nhunderter = seq(0, 10000, by = 100)\nhunderter"
  },
  {
    "objectID": "exercise/E02-vectors-dataframes.html#indexing-und-logische-operatoren",
    "href": "exercise/E02-vectors-dataframes.html#indexing-und-logische-operatoren",
    "title": "E02: Vektoren, Dataframes",
    "section": "Indexing und Logische Operatoren",
    "text": "Indexing und Logische Operatoren\n\nGib den 5ten Wert des Vektors aus.\nGib nur den letzten Wert des Vektors aus.\nSpeichere die ersten 20 Temperaturen in einer neuen Variablen.\nSpeichere die 30 niedrigsten Temperaturen in einer neuen Variablen.\n\n\n\nSolution\ntemperature[5]\ntemperature[length(temperature)]\n\ntemp_first_20 = temperature[seq(1,20)]\ntemp_low_30 = sort(temperature)[1:30]\n\n\n\nGib alle Temperaturen aus die 22°C überschreiten.\nWie oft wurde genau 18.79°C gemessen?\n\n\n\nSolution\ntemperature[temperature &gt; 22]\n\nsum(temperature == 18.79)\n#oder\nlength(temperature[temperature == 18.79])"
  },
  {
    "objectID": "exercise/E02-vectors-dataframes.html#dataframes",
    "href": "exercise/E02-vectors-dataframes.html#dataframes",
    "title": "E02: Vektoren, Dataframes",
    "section": "Dataframes",
    "text": "Dataframes\nZum Testen von Funktionen und zur Übung stellt R verschiedene Datensätze zur Verfügung. Der wohl bekannteste Datensatz davon ist iris er kann folgendermaßen geladen werden:\n\n\nSolution\ndata(iris)\nhead(iris)\n\n\n\nTeste folgende Funktionen mit dem Iris Datensatz: length(), nrow(), ncol(), summary(), colnames().\nSpeichere die Species Spalte in einer neuen Variablen. Um was für ein R Objekt handelt es sich nun?\nWie viele Species sind im Datensatz enthalten und wie oft kommt jede Species vor?\n\n\n\nSolution\nlength(iris)\nnrow(iris)\nncol(iris)\nsummary(iris)\nsummary(iris$Sepal.Length)\ncolnames(iris); names(iris)"
  },
  {
    "objectID": "exercise/E02-vectors-dataframes.html#dataframe-subsetting",
    "href": "exercise/E02-vectors-dataframes.html#dataframe-subsetting",
    "title": "E02: Vektoren, Dataframes",
    "section": "Dataframe subsetting",
    "text": "Dataframe subsetting\n\nErstelle einen neuen dataframe der nur die Beobachtungen der Species “virginica” enthält.\nErstelle einen neuen dataframe der nur die Beobachtungen der Species “setosa” und “versicolor” enthält.\nErstelle einen neuen dataframe der extakt die erste Hälfte der Beobachtungen enthält.\nErstelle einen neuen dataframe der nur Beobachtungen enthält mit einer Sepal.Length zwischen 5.5 und 7.\n\n\n\nSolution\nvir = iris[iris$Species == \"virginica\",]\nset_ver = iris[iris$Species == \"setosa\" | iris$Species == \"versicolor\",]\n# oder\nset_ver = iris[iris$Species != \"virginica\",]\n# oder\nset_ver = iris[iris$Species %in% c(\"setosa\", \"versicolor\"),]\n\n\niris_half = iris[1:(nrow(iris)/2),]\n\niris_sepal = iris[iris$Sepal.Length &gt; 5.5 & iris$Sepal.Length &lt; 7,]"
  },
  {
    "objectID": "exercise/E02-vectors-dataframes.html#bonus-ein-bisschen-statistik",
    "href": "exercise/E02-vectors-dataframes.html#bonus-ein-bisschen-statistik",
    "title": "E02: Vektoren, Dataframes",
    "section": "Bonus: Ein bisschen Statistik",
    "text": "Bonus: Ein bisschen Statistik\n\nWas ist die durchschnittliche Sepal.Length von “virginica”?\nZeichne ein Histogramm der Sepal.Width.\nBerechne die Varianz und Standardabweichung der Sepal.Width.\nZeichne einen Scatterplot mit der Sepal.Length auf der x-Achse und der Petal.Length auf der y-Achse.\n\n\n\nSolution\nmean(vir$Sepal.Length)\nhist(iris$Sepal.Width)\n\nvar(iris$Sepal.Width)\nsd(iris$Sepal.Width)\nplot(iris$Sepal.Length, iris$Petal.Length)\n\n\n\nTipp 1: Data.frames können als 2-Dimensionale Vektoren aufgefasst werden. Subsetting von data.frames benötigen deshalb 2 Werte, einen für die Reihe, einen für die Spalte.\n\n# row 1, column 2\niris[1,2]\n\n# the first row, empty means \"everything\"\niris[1,]\n\n# the first 3 rows, column 3 and 4\niris[seq(3), c(3,4)]\n\nTipp 2: Einzele Spalten können mit $ angewählt werden.\n\niris$Sepal.Length\n\nTipp 3: Googlen!"
  },
  {
    "objectID": "exercise/E03-more-dataframes.html#münsters-bezirke",
    "href": "exercise/E03-more-dataframes.html#münsters-bezirke",
    "title": "E03: Mehr Dataframes",
    "section": "Münsters Bezirke",
    "text": "Münsters Bezirke\n\nWelcher Bezirk Münsters ist am größten?\n\n\nbezirke$district[which.max(bezirke$area)]\n\n[1] \"Amelsbüren\"\n\n# oder:\nbezirke[bezirke$area == max(bezirke$area),]$district\n\n[1] \"Amelsbüren\"\n\n\n\nWie groß ist die Bezirksgruppe “Altstadt”?\n\n\nsum(bezirke[bezirke$district_group == \"Altstadt\",]$area)\n\n[1] 1194248\n\n# oder:\nsum(bezirke$area[which(bezirke$district_group == \"Altstadt\")])\n\n[1] 1194248\n\n\n\nZu welcher Bezirksgruppe gehört der Bezirk “Schloss”?\n\n\nbezirke[which(bezirke$district==\"Schloss\"),]$district_group\n\n[1] \"Innenstadtring\"\n\n# oder\nbezirke$district_group[which(bezirke$district==\"Schloss\")]\n\n[1] \"Innenstadtring\"\n\n\n\nAus Welchen Bezirken besteht die Bezirksgruppe “Münster-West”?\n\n\nmw = which(bezirke$district_group == \"Münster-West\")\nbezirke[mw,]$district\n\n[1] \"Albachten\"   \"Gievenbeck\"  \"Roxel\"       \"Mecklenbeck\" \"Nienberge\"  \n[6] \"Sentrup\"    \n\n# oder\nbezirke$district[bezirke$district_group == \"Münster-West\"]\n\n[1] \"Albachten\"   \"Gievenbeck\"  \"Roxel\"       \"Mecklenbeck\" \"Nienberge\"  \n[6] \"Sentrup\""
  },
  {
    "objectID": "exercise/E03-more-dataframes.html#münsters-bäume",
    "href": "exercise/E03-more-dataframes.html#münsters-bäume",
    "title": "E03: Mehr Dataframes",
    "section": "Münsters Bäume",
    "text": "Münsters Bäume\n\nWie viele Baumarten gibt es in Münster?\n\n\nv = trees$species\nlength(unique(v))\n\n[1] 67\n\n# oder\nlength(table(trees$species))\n\n[1] 67\n\n\n\nWie viele Buchen (species: Fagus) gibt es in Münster?\n\n\nsum(trees$species == \"Fagus\")\n\n[1] 420\n\n# oder:\nfagus = trees[trees$species == \"Fagus\",]\nnrow(fagus)\n\n[1] 420\n\nlength(fagus$species)\n\n[1] 420\n\n\n\nIn welchem Bezirk stehen die meisten Bäume?\n\n\nv1 = sort(table(trees$district), decreasing = TRUE)[1]\nv1 # Name mit Baumanzahl\n\nNienberge \n     2407 \n\nwhich.max(table(trees$district)) # Name mit Index\n\nNienberge \n       34 \n\n\n\nIn welchem Bezirk stehen die meisten Magnolien (species: Magnolia)?\n\n\nwhich.max(table(trees$district[trees$species == \"Magnolia\"]))\n\nBahnhof \n      2 \n\nmuenster_Magnolia &lt;- trees[trees$species== \"Magnolia\",]\ntable(muenster_Magnolia$district)\n\n\n      Aaseestadt          Bahnhof              Dom         Düesberg \n               1               25                1                8 \nGremmendorf-West        Herz-Jesu    Hiltrup-Mitte      Hiltrup-Ost \n               1                1                5                8 \n Kinderhaus-West    Mauritz-Mitte      Mecklenbeck      Schlachthof \n               4                7                2                6 \n         Schloss \n               7"
  },
  {
    "objectID": "exercise/E03-more-dataframes.html#und-noch-was-zum-knobeln",
    "href": "exercise/E03-more-dataframes.html#und-noch-was-zum-knobeln",
    "title": "E03: Mehr Dataframes",
    "section": "Und noch was zum Knobeln:",
    "text": "Und noch was zum Knobeln:\n\nErstelle eine Karte aller Bäume in den Bezirksgruppen “Altstadt” und “Innenstadtring”.\n\n\n# Welche districts sind in den districtgruppen \"Altstadt\" und \"Innnestadtring\"?\ninnermuenster = bezirke$district[bezirke$district_group == \"Altstadt\"| bezirke$district_group == \"Innenstadtring\"]\ninnermuenster\n\n [1] \"Bahnhof\"      \"Kreuz\"        \"Josef\"        \"Pluggendorf\"  \"Mauritz-West\"\n [6] \"Aegidii\"      \"Schloss\"      \"Dom\"          \"Martini\"      \"Hansaplatz\"  \n[11] \"Buddenturm\"   \"Neutor\"       \"Überwasser\"   \"Schlachthof\" \n\n# diesen Vektor benutzen um die Bäume zu filter:\nmuenster_trees_innermuenster = trees[trees$district %in% innermuenster,]\n\n# Dann X und Y plotten, asp = 1 verhindert verzerrung (aspect ratio), cex = 0.1 ist die Punktgrösse\nplot(muenster_trees_innermuenster$X, muenster_trees_innermuenster$Y,\n     asp = 1, cex = 0.1)"
  },
  {
    "objectID": "exercise/E04-tidyverse.html#münsters-bezirke",
    "href": "exercise/E04-tidyverse.html#münsters-bezirke",
    "title": "E04: Tidyverse, strings",
    "section": "Münsters Bezirke",
    "text": "Münsters Bezirke\n\nWie groß ist die Bezirksgruppe “Altstadt” (Fläche)?\n\n\nlibrary(tidyverse)\n\ndistricts[districts$district_group == \"Altstadt\",]$area\n\n\nselect(districts, \"area\")\n\nfilter(districts, districts$district_group == \"Altstadt\")\n\n\n# |&gt; pipe operator, auch %&gt;%, einfügen mit strg + shift + m\ndistricts |&gt; \n    filter(districts$district_group == \"Altstadt\") |&gt;\n    select(\"area\")\n\ndistricts |&gt; \n    filter(district_group == \"Altstadt\") |&gt;\n    select(area) |&gt; \n    sum()\n\n#\n\n\nZu welcher Bezirksgruppe gehört der Bezirk “Schloss”?\n\n\ndistricts |&gt; \n    filter(district == \"Schloss\") |&gt; \n    select(district_group)\n\n\nAus welchen Bezirken besteht die Bezirksgruppe “Münster-West”?\n\n\ndistricts |&gt; \n    filter(district_group == \"Münster-West\") |&gt; \n    select(district)\n# typische pipe schreibweise, zeilen + spalten auswählen\ndistricts |&gt; \n    filter(district_group == \"Münster-West\") |&gt; \n    select(district)\n\n\nErstelle eine Tabelle die für jede Bezirksgruppe den Mittelwert und die Standardabweichung der Fläche der jeweiligen Bezirke berechnet. Nutze dafür die Funktionen dplyr::group_by() und dplyr::summarise()\n\n\n# typische gruppierung und zusammenfassung\ndistricts |&gt; \n    group_by(district_group) |&gt; \n    summarise(area_m = mean( area ),\n              area_sd = sd( area ))"
  },
  {
    "objectID": "exercise/E04-tidyverse.html#münsters-bäume",
    "href": "exercise/E04-tidyverse.html#münsters-bäume",
    "title": "E04: Tidyverse, strings",
    "section": "Münsters Bäume",
    "text": "Münsters Bäume\n\nWie viele Baumarten gibt es in Münster?\n\n\nv = trees$species\nlength(unique(v))\n\ntrees |&gt; \n    select(species) |&gt; \n    unique() |&gt; \n    count()\n\n\nWie viele Buchen (species: Fagus) gibt es in Münster?\n\n\ntrees |&gt; \n    filter(species == \"Fagus\") |&gt; \n    pull(species) |&gt; \n    length()\n# oder:\ntrees |&gt; \n    filter(species == \"Fagus\") |&gt;\n    nrow()\n\n\nErstelle eine Tabelle die für jeden Bezirk die Anzahl unterschiedlicher Baumarten angibt. Nutze dafür die Funktionen dplyr::group_by() und dplyr::summarise()\n\n\nntrees = trees |&gt; \n    group_by(district) |&gt; \n    summarise(n = length(unique(species)))"
  },
  {
    "objectID": "exercise/E04-tidyverse.html#strings",
    "href": "exercise/E04-tidyverse.html#strings",
    "title": "E04: Tidyverse, strings",
    "section": "Strings",
    "text": "Strings\nNutze für die folgenden Aufgaben Funktionen des stringr Pakets.\n\nWie viele Bezirke beginnen mit “H”?\n\n\ndistricts |&gt; pull(district) |&gt; str_starts(\"H\") |&gt; sum()\n\nsum(str_starts(districts$district, \"H\"))\n\n\nGib alle Bezirke aus die das Wort “Ost” enthalten.\n\n\nIn der Baumtabelle gibt es in der Spalte species sowohl Einträge mit “Metasequoia” als auch mit “Metasequoia glyptostroboides”. Ändere alle “Metasequoia glyptostroboides” zu “Metasequoia”."
  },
  {
    "objectID": "exercise/E05-kritischer-sauerstoff.html#fallstudie-kritischer-sauerstoffgehalt-im-aasee",
    "href": "exercise/E05-kritischer-sauerstoff.html#fallstudie-kritischer-sauerstoffgehalt-im-aasee",
    "title": "E05: Daten aufräumen",
    "section": "Fallstudie: Kritischer Sauerstoffgehalt im Aasee",
    "text": "Fallstudie: Kritischer Sauerstoffgehalt im Aasee\n2018, starben mehr als 20 Tonnen Fisch im Aasee wegen zu geringem Sauerstoffgehalt: https://www.uni-muenster.de/news/view.php?cmdid=9768.\nBasierend auf diesem Ereignis kann man die Frage stellen:\n\nAn wie vielen Tagen im Jahr 2022 war der Sauerstoffgehalt im Aasee zu niedrig (4 mg/l)?\n\nDie folgenden Aufgaben sollen Schritt für Schritt eine mögliche herangehensweise darstellen:\n\n\nDie Tabelle enthält die Spalte Datum mit Texten (strings) in folgendem Format: “2021-05-31 23:57”. Erstelle 3 neue Spalten mit den Namen Jahr, Monat und Tag die dann jeweils nur die entsprechende Information beinhalten.\n\n\nErstelle eine neue Tabelle, die nur die Messwerte aus dem Jahr 2022 enthält.\n\n\nDie Ausgangsfrage sollte jetzt leicht zu beantworten sein: An wie vielen Tagen im Jahr 2022 war der Sauerstoffgehalt im Aasee zu niedrig (4 mg/l)?\n\nBonus: Überlege dir eine geeignete Visualisierung um den Sachverhalt Markus Lewe zu erklären."
  },
  {
    "objectID": "exercise/E06-feldfruechte-arthropoden.html#task-crops-vs.-species",
    "href": "exercise/E06-feldfruechte-arthropoden.html#task-crops-vs.-species",
    "title": "E06 - Feldfruechte und Arthropoden",
    "section": "TASK: Crops vs. Species",
    "text": "TASK: Crops vs. Species\n\nHow many different crop types where analysed in the study?\nHow many plots are there for each crop type?\nWhich plot had the most individual animals? (regardless of species)\nWhich plot was the most diverse?\nWhat is the average number of Carabidaes on all the plots containing winter wheat?\nWhat is the minimum number of individuals and species per crop type?\nVisualize the number of Carabidaes per crop type.\nPlot the number of Araneae species in relation to the number of individual Araneae.\nIf there are more individual Araneae on a plot, are there also more Araneae species?\n\n\n\n\n\nMeyer, Michael, David Ott, Philipp Götze, Heinz-Josef Koch, and Christoph Scherber. 2019. “Crop Identity and Memory Effects on Aboveground Arthropods in a Long-Term Crop Rotation Experiment.” Ecology and Evolution 9 (12): 7307–23. https://doi.org/10.1002/ece3.5302."
  },
  {
    "objectID": "98-additional_resources.html#r-cheat-sheets",
    "href": "98-additional_resources.html#r-cheat-sheets",
    "title": "Additional Ressources",
    "section": "R cheat sheets",
    "text": "R cheat sheets\nThese are compact overview of R functions and how to use them.\nhttps://www.rstudio.com/resources/cheatsheets/\nUseful for the course are the following:\n\nBase R\nstringr\nlubridate\ndplyr\nggplot2"
  },
  {
    "objectID": "98-additional_resources.html#useful-keyboard-shortcuts",
    "href": "98-additional_resources.html#useful-keyboard-shortcuts",
    "title": "Additional Ressources",
    "section": "Useful Keyboard shortcuts",
    "text": "Useful Keyboard shortcuts\n\nCtrl + i: indent automatically\nCtrl + shift + c: comment / uncomment marked lines\nCtrl + s: save script\nCtrl + shift + m: insert pipe operator %&gt;%/|&gt;\nF1: open help page of marked function\nF2: open source code of marked function"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Chambers, John M. 2016. Extending R. The\nR Series. Boca Raton, Fla. London New York:\nCRC Press, Taylor & Francis Group.\n\n\nChambers, John, M. 2020. “S, R, and Data\nScience.” The R Journal 12 (1): 462. https://doi.org/10.32614/RJ-2020-028.\n\n\nMeyer, Michael, David Ott, Philipp Götze, Heinz-Josef Koch, and\nChristoph Scherber. 2019. “Crop Identity and Memory Effects on\nAboveground Arthropods in a Long-Term Crop Rotation Experiment.”\nEcology and Evolution 9 (12): 7307–23. https://doi.org/10.1002/ece3.5302.\n\n\nSlater, Louise J., Guillaume Thirel, Shaun Harrigan, Olivier Delaigue,\nAlexander Hurley, Abdou Khouakhi, Ilaria Prosdocimi, Claudia Vitolo, and\nKatie Smith. 2019. “Using R in Hydrology: A Review of\nRecent Developments and Future Directions.” Hydrology and\nEarth System Sciences 23 (7): 2939–63. https://doi.org/10.5194/hess-23-2939-2019.\n\n\nTurner, W. 2014. “Sensing Biodiversity.” Science\n346 (6207): 301–2. https://doi.org/10.1126/science.1256014."
  }
]