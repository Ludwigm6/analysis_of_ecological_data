[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of Ecological Data with R",
    "section": "",
    "text": "Landscape Ecology with R\n\n\n\n\n\n\n\nYou want answers to questions (in landscape ecology)!\nPrimarily ecologists but the methods and skills are useful in many fields.\nNo R knowledge is required (or other programming skills)\nIt is helpful if you know what a spreadsheet is\nMinimum amount of statistic needed (course explains all the necessary stuff)\n\n\n\n\n\nDeveloping ideas, answering questions\nDefining steps how to solve a problem\nTranslating these steps into R code\nLearning the necessary R language on the way\nData handling. A lot of data handling.\nLearn statistics. Use statistics as a tool.\n\n\n\n\n\nstatistics as in mathematical equations\n\n\\[\n\\left( {\\begin{array}{*{20}c}\n   n  \\\\\n   k  \\\\\n\\end{array}} \\right) = \\frac{{n!}}{{k!\\left( {n - k} \\right)!}}\n\\]\n\\[\n\\sigma ^2  = \\mu _2  = \\sum {\\left( {x - \\mu _1 } \\right)^2 P\\left( x \\right)}\n\\]\n\nR as in computer science\nYou probably won’t find out anything you didn’t already know about nature\n\n\n\n\n\nSummary and Exercises from last week\nNew Input\nExercises\nStudienleistung: 10 assignments - Passed with 6 assignments &gt; 50%"
  },
  {
    "objectID": "index.html#target-audience",
    "href": "index.html#target-audience",
    "title": "Analysis of Ecological Data with R",
    "section": "",
    "text": "You want answers to questions (in landscape ecology)!\nPrimarily ecologists but the methods and skills are useful in many fields.\nNo R knowledge is required (or other programming skills)\nIt is helpful if you know what a spreadsheet is\nMinimum amount of statistic needed (course explains all the necessary stuff)"
  },
  {
    "objectID": "index.html#aims-of-this-course",
    "href": "index.html#aims-of-this-course",
    "title": "Analysis of Ecological Data with R",
    "section": "",
    "text": "Developing ideas, answering questions\nDefining steps how to solve a problem\nTranslating these steps into R code\nLearning the necessary R language on the way\nData handling. A lot of data handling.\nLearn statistics. Use statistics as a tool."
  },
  {
    "objectID": "index.html#what-this-course-is-not",
    "href": "index.html#what-this-course-is-not",
    "title": "Analysis of Ecological Data with R",
    "section": "",
    "text": "statistics as in mathematical equations\n\n\\[\n\\left( {\\begin{array}{*{20}c}\n   n  \\\\\n   k  \\\\\n\\end{array}} \\right) = \\frac{{n!}}{{k!\\left( {n - k} \\right)!}}\n\\]\n\\[\n\\sigma ^2  = \\mu _2  = \\sum {\\left( {x - \\mu _1 } \\right)^2 P\\left( x \\right)}\n\\]\n\nR as in computer science\nYou probably won’t find out anything you didn’t already know about nature"
  },
  {
    "objectID": "index.html#course-outline",
    "href": "index.html#course-outline",
    "title": "Analysis of Ecological Data with R",
    "section": "",
    "text": "Summary and Exercises from last week\nNew Input\nExercises\nStudienleistung: 10 assignments - Passed with 6 assignments &gt; 50%"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References",
    "crumbs": [
      "Appendix",
      "References"
    ]
  },
  {
    "objectID": "R10_ggplot.html",
    "href": "R10_ggplot.html",
    "title": "ggplot2",
    "section": "",
    "text": "Es gibt nur eine Breitbandleitung ins Hirn und das sind die Augen. David Kriesel\n\nIn the course, we used a variety of datasets. All of them have different features and difficulties that we need to keep in mind when we want to visualize parts of the data to point out some interesting facts!\nThe German Climate Data data has a temporal component and “continuous” measurements. The arthoropode species on crop fields follow the classic plot based design and allows for comparisons between different groups. The trees and districts of Muenster potentially have a spatial component to it but also allow for comparisons of the different species and districts.\n\n\nScientific figures and advanced visualization in R are usually done with the ggplot2 package.\n\nhttps://ggplot2.tidyverse.org/\ntidyverse package: synergies and integration with e.g. dplyr\nlayer based language that are combined with +\ndifferentiated by “static” and “dynamic” parameters\nmany extensions: https://exts.ggplot2.tidyverse.org/gallery/\nGallery for inspiration: https://r-graph-gallery.com/index.html\n\n\nlibrary(ggplot2)\nlibrary(viridis) # for better color scales\n\nspecies = read.csv(\"data/crop_species.csv\")\n\n\n\nTell ggplot which data.frame is the basis for the plot.\n\nggplot(data = species)\n\n\n\n\n\n\n\n\nThe mapping argument of the ggplot() function handles which columns of the data should be used for which purpose. To specify this, we use the aes() function (aesthetics). Common things that we specify:\n\nx\ny\ngroup\ncolor\nfill\n\nHere we specify that on the x-axis in our plot represent the AraInd column. As a result we get the proper y-axis, but still no data is shown. For this, we have to specify in which form the data should be depicted.\n\nggplot(data = species, mapping = aes(x = AraInd))\n\n\n\n\n\n\n\n\n\n\n\nThere are many different geometry types build into ggplot2 and even more from additional packages. The functions to create the geometry layers usually start with geom_. The geom functions also have their own arguments you can specify.\n\ngeom_point\ngeom_line\ngeom_boxplot\ngeom_histogram\n…\n\n\nggplot(species, aes(x = AraInd))+\n    geom_histogram()\n\n\n\n\n\n\n\n\n\nggplot(species, aes(x = AraInd))+\n    geom_histogram(binwidth = 10, fill = \"darkgreen\", color = \"black\")\n\n\n\n\n\n\n\n\nDifferent geometry types require more than one aesthetic. E.g. geom_point needs the x and y aesthetics.\n\nggplot(species, aes(x = Croptype, y = AraInd))+\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\nThe Axis format depends on the type of variable you want to plot. We have to be aware of what scale type we have.\n\ndiscrete scale for categorical data\ncontinuous scale for numeric data\nlimits, ticks, labels …\n\n\nggplot(species, aes(x = Croptype, y = AraInd))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_x_discrete(labels = c(\"KE\" = \"Grain Pea\",\n                                \"SM\" = \"Silage Maize\",\n                                \"WR\" = \"Winter Oilseed Rape\",\n                                \"WW\" = \"Winter Wheat\",\n                                \"ZR\" = \"Sugar Beet\"))+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))\n\n\n\n\n\n\n\n\nWe can also save the plot to a object to reuse and modify it later.\n\naraind_plot = ggplot(species, aes(x = Croptype, y = AraInd))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_x_discrete(labels = c(\"KE\" = \"Grain Pea\",\n                                \"SM\" = \"Silage Maize\",\n                                \"WR\" = \"Winter Oilseed Rape\",\n                                \"WW\" = \"Winter Wheat\",\n                                \"ZR\" = \"Sugar Beet\"))+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))\n\n\n\naraind_plot + ggtitle(\"Aranae [n] per crop type\")\n\n\n\n\n\n\n\n\n\n\n\nWith the color and fill arguments in aes() we specify which columns of the data.frame should be represented as a color scale in the plot.\n\nggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_x_discrete(name = \"Crop Type\")+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))\n\n\n\n\n\n\n\n\nWe can specify the colors by adding a scale_color_ layer. Just like with the axis, there are discrete and continuous color scales available!\n\nggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_color_gradient(name = \"Aranae\\nSpecies [n]\", low = \"yellow\", high = \"red\")+\n    scale_x_discrete(name = \"Crop Type\")+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))\n\n\n\n\n\n\n\n\n\n\n\nThere are many prebuild themes…\n\nggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_color_gradientn(name = \"Aranae\\nSpecies [n]\",colors = mako(50))+\n    scale_x_discrete(name = \"Crop Type\")+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))+\n    theme_minimal()\n\n\n\n\n\n\n\n\n… or you can specify your own:\n\nggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_color_gradientn(name = \"Aranae\\nSpecies [n]\",colors = mako(50))+\n    scale_x_discrete(name = \"Crop Type\")+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200), expand = c(0,0))+\n    theme(panel.background = element_blank(),\n          panel.grid.major.y = element_line(color = \"black\", linetype = \"dotted\"),\n          axis.line = element_line(color = \"black\"))",
    "crumbs": [
      "Graphics",
      "ggplot2"
    ]
  },
  {
    "objectID": "R10_ggplot.html#the-grammar-of-graphics",
    "href": "R10_ggplot.html#the-grammar-of-graphics",
    "title": "ggplot2",
    "section": "",
    "text": "Scientific figures and advanced visualization in R are usually done with the ggplot2 package.\n\nhttps://ggplot2.tidyverse.org/\ntidyverse package: synergies and integration with e.g. dplyr\nlayer based language that are combined with +\ndifferentiated by “static” and “dynamic” parameters\nmany extensions: https://exts.ggplot2.tidyverse.org/gallery/\nGallery for inspiration: https://r-graph-gallery.com/index.html\n\n\nlibrary(ggplot2)\nlibrary(viridis) # for better color scales\n\nspecies = read.csv(\"data/crop_species.csv\")\n\n\n\nTell ggplot which data.frame is the basis for the plot.\n\nggplot(data = species)\n\n\n\n\n\n\n\n\nThe mapping argument of the ggplot() function handles which columns of the data should be used for which purpose. To specify this, we use the aes() function (aesthetics). Common things that we specify:\n\nx\ny\ngroup\ncolor\nfill\n\nHere we specify that on the x-axis in our plot represent the AraInd column. As a result we get the proper y-axis, but still no data is shown. For this, we have to specify in which form the data should be depicted.\n\nggplot(data = species, mapping = aes(x = AraInd))\n\n\n\n\n\n\n\n\n\n\n\nThere are many different geometry types build into ggplot2 and even more from additional packages. The functions to create the geometry layers usually start with geom_. The geom functions also have their own arguments you can specify.\n\ngeom_point\ngeom_line\ngeom_boxplot\ngeom_histogram\n…\n\n\nggplot(species, aes(x = AraInd))+\n    geom_histogram()\n\n\n\n\n\n\n\n\n\nggplot(species, aes(x = AraInd))+\n    geom_histogram(binwidth = 10, fill = \"darkgreen\", color = \"black\")\n\n\n\n\n\n\n\n\nDifferent geometry types require more than one aesthetic. E.g. geom_point needs the x and y aesthetics.\n\nggplot(species, aes(x = Croptype, y = AraInd))+\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\nThe Axis format depends on the type of variable you want to plot. We have to be aware of what scale type we have.\n\ndiscrete scale for categorical data\ncontinuous scale for numeric data\nlimits, ticks, labels …\n\n\nggplot(species, aes(x = Croptype, y = AraInd))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_x_discrete(labels = c(\"KE\" = \"Grain Pea\",\n                                \"SM\" = \"Silage Maize\",\n                                \"WR\" = \"Winter Oilseed Rape\",\n                                \"WW\" = \"Winter Wheat\",\n                                \"ZR\" = \"Sugar Beet\"))+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))\n\n\n\n\n\n\n\n\nWe can also save the plot to a object to reuse and modify it later.\n\naraind_plot = ggplot(species, aes(x = Croptype, y = AraInd))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_x_discrete(labels = c(\"KE\" = \"Grain Pea\",\n                                \"SM\" = \"Silage Maize\",\n                                \"WR\" = \"Winter Oilseed Rape\",\n                                \"WW\" = \"Winter Wheat\",\n                                \"ZR\" = \"Sugar Beet\"))+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))\n\n\n\naraind_plot + ggtitle(\"Aranae [n] per crop type\")\n\n\n\n\n\n\n\n\n\n\n\nWith the color and fill arguments in aes() we specify which columns of the data.frame should be represented as a color scale in the plot.\n\nggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_x_discrete(name = \"Crop Type\")+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))\n\n\n\n\n\n\n\n\nWe can specify the colors by adding a scale_color_ layer. Just like with the axis, there are discrete and continuous color scales available!\n\nggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_color_gradient(name = \"Aranae\\nSpecies [n]\", low = \"yellow\", high = \"red\")+\n    scale_x_discrete(name = \"Crop Type\")+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))\n\n\n\n\n\n\n\n\n\n\n\nThere are many prebuild themes…\n\nggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_color_gradientn(name = \"Aranae\\nSpecies [n]\",colors = mako(50))+\n    scale_x_discrete(name = \"Crop Type\")+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200))+\n    theme_minimal()\n\n\n\n\n\n\n\n\n… or you can specify your own:\n\nggplot(species, aes(x = Croptype, y = AraInd, color = AraSpec))+\n    geom_point(size = 4, alpha = 0.8, shape = 18)+\n    scale_color_gradientn(name = \"Aranae\\nSpecies [n]\",colors = mako(50))+\n    scale_x_discrete(name = \"Crop Type\")+\n    scale_y_continuous(name = \"Aranae [n]\", limits = c(0,200), expand = c(0,0))+\n    theme(panel.background = element_blank(),\n          panel.grid.major.y = element_line(color = \"black\", linetype = \"dotted\"),\n          axis.line = element_line(color = \"black\"))",
    "crumbs": [
      "Graphics",
      "ggplot2"
    ]
  },
  {
    "objectID": "R08_formula.html",
    "href": "R08_formula.html",
    "title": "Formula notation",
    "section": "",
    "text": "Formula notation\nSome functions use a so called formula as an argument. Look e.g. at the help page of boxplot() to see that it’s able to takes an argument formula the description\n\na formula, such as y ~ grp, where y is a numeric vector of data values to be split into groups according to the grouping variable grp (usually a factor).\n\n\na = c(1,5,3)\nb = c(6,8,7)\n\na ~ b\n\na ~ b\n\nclass(a~b)\n\n[1] \"formula\"\n\n\nA lot of statistical functions use this notation. As a beginner you most likely find formulas in boxplot(), plot() and lm().\n\ndata(iris)\nboxplot(iris$Petal.Length ~ iris$Species)\n\n\n\n\n\n\n\n\nThink about the ~ like as a function of. So boxplot(iris$Petal.Length ~ iris$Species) means: Give me boxplots of the petal length as a function of species.\n\n# Show me the Sepal.Length as a function of Petal.Length\nplot(iris$Sepal.Length ~ iris$Petal.Length)\n\n\n\n\n\n\n\n\n\n# calculate the relation between Sepal.Length and Petal.Length\n# model Sepal.Length as a function of Petal.Length\n\n\nlmod = lm(iris$Sepal.Length ~ iris$Petal.Length)\n\nplot(iris$Sepal.Length ~ iris$Petal.Length)\nabline(lmod)",
    "crumbs": [
      "Utility \n & Applications",
      "Formula notation"
    ]
  },
  {
    "objectID": "R06_strings.html",
    "href": "R06_strings.html",
    "title": "Strings",
    "section": "",
    "text": "Modifying strings (i.e. text) is a very common task but can be a bit tricky if you start out. Here are some functions to try out:\n\ncreate strings from multiple “substrings” with the paste or paste0 function\n\n\nn = 5\npaste(\"The number five:\", n)\n\n[1] \"The number five: 5\"\n\n# again functions are vectorized\npaste(seq(10), \"is\", c(\"odd\", \"even\"))\n\n [1] \"1 is odd\"   \"2 is even\"  \"3 is odd\"   \"4 is even\"  \"5 is odd\"  \n [6] \"6 is even\"  \"7 is odd\"   \"8 is even\"  \"9 is odd\"   \"10 is even\"\n\n# paste0 defaults to no character for separating the strings\npaste0(n, \"five\", n)\n\n[1] \"5five5\"\n\n\n\n\nFor advanced string handling we will make our lives easier by using the stringr package.\nTo use functions from a package we have to load it first with the library function. The first time you want to use a package you might have to install it first with install.packages.\n\ninstall.packages(\"stringr\")\n\nlibrary(stringr)\n\nMany packages have so called vignettes which are tutorial style help pages about the package. You can access vignettes via the “Packages” Pane in R studio or with a quick Google search.\nIt is a good idea to go over the vignette when using a new package.\n\ns = \"Hi Mom!\"\n\n# you can indicate in your script from which package a function comes from\n# by using ::\nstringr::str_length(s)\n\n[1] 7\n\nstr_sub(string = s, start = 1, end = 2)\n\n[1] \"Hi\"\n\n# vectorized:\nstring_vector = paste(seq(12), \"is\", c(\"odd\", \"even\"))\nstring_vector\n\n [1] \"1 is odd\"   \"2 is even\"  \"3 is odd\"   \"4 is even\"  \"5 is odd\"  \n [6] \"6 is even\"  \"7 is odd\"   \"8 is even\"  \"9 is odd\"   \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\"\n\nstr_remove(string_vector, pattern = \"is \")\n\n [1] \"1 odd\"   \"2 even\"  \"3 odd\"   \"4 even\"  \"5 odd\"   \"6 even\"  \"7 odd\"  \n [8] \"8 even\"  \"9 odd\"   \"10 even\" \"11 odd\"  \"12 even\"\n\n# stringr functions are part of the tidyverse\n# pipes work:\nstring_vector |&gt; str_replace(pattern = \" is\", replacement = \":\")\n\n [1] \"1: odd\"   \"2: even\"  \"3: odd\"   \"4: even\"  \"5: odd\"   \"6: even\" \n [7] \"7: odd\"   \"8: even\"  \"9: odd\"   \"10: even\" \"11: odd\"  \"12: even\"\n\n\n\n\nPattern matching are logical operators for strings.\n\nstr_detect(string_vector, pattern = \"odd\")\n\n [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\nstr_which(string_vector, pattern = \"even\")\n\n[1]  2  4  6  8 10 12\n\nstr_starts(string_vector, pattern = \"1\")\n\n [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\nstr_count(string_vector, pattern = \"1\")\n\n [1] 1 0 0 0 0 0 0 0 0 1 2 1\n\n\n\n\n\nstr_pad one can be quite important to keep you sane.\n\nstring_vector = paste(seq(15), \"is\", c(\"odd\", \"even\"))\nstring_vector\n\n [1] \"1 is odd\"   \"2 is even\"  \"3 is odd\"   \"4 is even\"  \"5 is odd\"  \n [6] \"6 is even\"  \"7 is odd\"   \"8 is even\"  \"9 is odd\"   \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\" \"13 is odd\"  \"14 is even\" \"15 is odd\" \n\nstring_vector_pad = paste(str_pad(seq(15), width = 2, pad = 0, side = \"left\"),\n                          \"is\",\n                          c(\"odd\", \"even\"))\nstring_vector_pad\n\n [1] \"01 is odd\"  \"02 is even\" \"03 is odd\"  \"04 is even\" \"05 is odd\" \n [6] \"06 is even\" \"07 is odd\"  \"08 is even\" \"09 is odd\"  \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\" \"13 is odd\"  \"14 is even\" \"15 is odd\"",
    "crumbs": [
      "Utility \n & Applications",
      "Strings"
    ]
  },
  {
    "objectID": "R06_strings.html#the-stringr-package",
    "href": "R06_strings.html#the-stringr-package",
    "title": "Strings",
    "section": "",
    "text": "For advanced string handling we will make our lives easier by using the stringr package.\nTo use functions from a package we have to load it first with the library function. The first time you want to use a package you might have to install it first with install.packages.\n\ninstall.packages(\"stringr\")\n\nlibrary(stringr)\n\nMany packages have so called vignettes which are tutorial style help pages about the package. You can access vignettes via the “Packages” Pane in R studio or with a quick Google search.\nIt is a good idea to go over the vignette when using a new package.\n\ns = \"Hi Mom!\"\n\n# you can indicate in your script from which package a function comes from\n# by using ::\nstringr::str_length(s)\n\n[1] 7\n\nstr_sub(string = s, start = 1, end = 2)\n\n[1] \"Hi\"\n\n# vectorized:\nstring_vector = paste(seq(12), \"is\", c(\"odd\", \"even\"))\nstring_vector\n\n [1] \"1 is odd\"   \"2 is even\"  \"3 is odd\"   \"4 is even\"  \"5 is odd\"  \n [6] \"6 is even\"  \"7 is odd\"   \"8 is even\"  \"9 is odd\"   \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\"\n\nstr_remove(string_vector, pattern = \"is \")\n\n [1] \"1 odd\"   \"2 even\"  \"3 odd\"   \"4 even\"  \"5 odd\"   \"6 even\"  \"7 odd\"  \n [8] \"8 even\"  \"9 odd\"   \"10 even\" \"11 odd\"  \"12 even\"\n\n# stringr functions are part of the tidyverse\n# pipes work:\nstring_vector |&gt; str_replace(pattern = \" is\", replacement = \":\")\n\n [1] \"1: odd\"   \"2: even\"  \"3: odd\"   \"4: even\"  \"5: odd\"   \"6: even\" \n [7] \"7: odd\"   \"8: even\"  \"9: odd\"   \"10: even\" \"11: odd\"  \"12: even\"\n\n\n\n\nPattern matching are logical operators for strings.\n\nstr_detect(string_vector, pattern = \"odd\")\n\n [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\nstr_which(string_vector, pattern = \"even\")\n\n[1]  2  4  6  8 10 12\n\nstr_starts(string_vector, pattern = \"1\")\n\n [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\nstr_count(string_vector, pattern = \"1\")\n\n [1] 1 0 0 0 0 0 0 0 0 1 2 1\n\n\n\n\n\nstr_pad one can be quite important to keep you sane.\n\nstring_vector = paste(seq(15), \"is\", c(\"odd\", \"even\"))\nstring_vector\n\n [1] \"1 is odd\"   \"2 is even\"  \"3 is odd\"   \"4 is even\"  \"5 is odd\"  \n [6] \"6 is even\"  \"7 is odd\"   \"8 is even\"  \"9 is odd\"   \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\" \"13 is odd\"  \"14 is even\" \"15 is odd\" \n\nstring_vector_pad = paste(str_pad(seq(15), width = 2, pad = 0, side = \"left\"),\n                          \"is\",\n                          c(\"odd\", \"even\"))\nstring_vector_pad\n\n [1] \"01 is odd\"  \"02 is even\" \"03 is odd\"  \"04 is even\" \"05 is odd\" \n [6] \"06 is even\" \"07 is odd\"  \"08 is even\" \"09 is odd\"  \"10 is even\"\n[11] \"11 is odd\"  \"12 is even\" \"13 is odd\"  \"14 is even\" \"15 is odd\"",
    "crumbs": [
      "Utility \n & Applications",
      "Strings"
    ]
  },
  {
    "objectID": "R05_tidyverse.html",
    "href": "R05_tidyverse.html",
    "title": "Introduction to tidyverse",
    "section": "",
    "text": "collection of packages\nlibrary(tidyverse) loads multiple packages\nconsistent syntax and workflows\nmakes code more readable\npipe operator %&gt;% / |&gt; can chain functions together\ntidy data approach\n\nrows are observations\ncolumns are variables / features\n\n\n\n\n\nhttps://ajsmit.github.io/Intro_R_Official/figures/tidy_workflow.png\n\n\n\n\n\nprovides functions for dataframe manipulation\ncan complement or replace base R functions\n\n\n\n\nhttps://biostat2.uni.lu/lectures/img/06/vaudor_dplyr_schema.png\n\n\n\nlibrary(dplyr)\naasee = read.csv(\"data/2021-06_aasee.csv\")\n\n# slice - gives back a slice of data - i.e. the specified rows\naasee = slice(aasee, seq(8))\n\n\n# select - selects columns\nselect(aasee, Wassertemperatur)\n\n  Wassertemperatur\n1            17.98\n2            17.66\n3            18.03\n4            18.08\n5            18.06\n6            18.01\n7            18.02\n8            18.06\n\n# filter - filters rows based on logical operators\nfilter(aasee, Wassertemperatur &lt; 18)\n\n             Datum Wassertemperatur pH.Wert Sauerstoffgehalt\n1 2021-05-31 23:57            17.98    8.05            10.53\n2 2021-06-01 00:09            17.66    8.04             9.64\n\n# mutate - mutates the data.frame by adding columns\nmutate(aasee, t_kelvin = Wassertemperatur + 273.15)\n\n             Datum Wassertemperatur pH.Wert Sauerstoffgehalt t_kelvin\n1 2021-05-31 23:57            17.98    8.05            10.53   291.13\n2 2021-06-01 00:09            17.66    8.04             9.64   290.81\n3 2021-06-01 00:19            18.03    8.12            11.30   291.18\n4 2021-06-01 00:27            18.08    8.14            11.32   291.23\n5 2021-06-01 00:39            18.06    8.12            11.06   291.21\n6 2021-06-01 00:49            18.01    8.10            10.91   291.16\n7 2021-06-01 00:59            18.02    8.10            10.96   291.17\n8 2021-06-01 01:08            18.06    8.10            10.83   291.21\n\n# summarise - summarises data\nsummarise(aasee, minimum_t = min(Wassertemperatur))\n\n  minimum_t\n1     17.66\n\n\nThe functions itself could all be realized with base R functions:\n\n# the same in base R\n\n# select\naasee$Wassertemperatur\n\n[1] 17.98 17.66 18.03 18.08 18.06 18.01 18.02 18.06\n\n# filter\naasee[,aasee$Wassertemperatur &lt; 18]\n\n             Datum Wassertemperatur\n1 2021-05-31 23:57            17.98\n2 2021-06-01 00:09            17.66\n3 2021-06-01 00:19            18.03\n4 2021-06-01 00:27            18.08\n5 2021-06-01 00:39            18.06\n6 2021-06-01 00:49            18.01\n7 2021-06-01 00:59            18.02\n8 2021-06-01 01:08            18.06\n\n# mutate\naasee$t_kelvin = aasee$Wassertemperatur + 273.15\n\n# summarise\nmin(aasee$Wassertemperatur)\n\n[1] 17.66\n\n\nThe strength of dplyr is the possibility to chain functions with %&gt;% or |&gt;.\n\naasee|&gt; \n    filter(Wassertemperatur &lt; 18) |&gt; \n    select(pH.Wert) |&gt;  \n    max()\n\n[1] 8.05\n\n\nWith base R functions this looks messy, because we have to use functions inside functions.\n\nmax(aasee$pH.Wert[aasee$Wassertemperatur &lt; 18])\n\n[1] 8.05",
    "crumbs": [
      "Dataframes",
      "Introduction to tidyverse"
    ]
  },
  {
    "objectID": "R05_tidyverse.html#dplyr",
    "href": "R05_tidyverse.html#dplyr",
    "title": "Introduction to tidyverse",
    "section": "",
    "text": "provides functions for dataframe manipulation\ncan complement or replace base R functions\n\n\n\n\nhttps://biostat2.uni.lu/lectures/img/06/vaudor_dplyr_schema.png\n\n\n\nlibrary(dplyr)\naasee = read.csv(\"data/2021-06_aasee.csv\")\n\n# slice - gives back a slice of data - i.e. the specified rows\naasee = slice(aasee, seq(8))\n\n\n# select - selects columns\nselect(aasee, Wassertemperatur)\n\n  Wassertemperatur\n1            17.98\n2            17.66\n3            18.03\n4            18.08\n5            18.06\n6            18.01\n7            18.02\n8            18.06\n\n# filter - filters rows based on logical operators\nfilter(aasee, Wassertemperatur &lt; 18)\n\n             Datum Wassertemperatur pH.Wert Sauerstoffgehalt\n1 2021-05-31 23:57            17.98    8.05            10.53\n2 2021-06-01 00:09            17.66    8.04             9.64\n\n# mutate - mutates the data.frame by adding columns\nmutate(aasee, t_kelvin = Wassertemperatur + 273.15)\n\n             Datum Wassertemperatur pH.Wert Sauerstoffgehalt t_kelvin\n1 2021-05-31 23:57            17.98    8.05            10.53   291.13\n2 2021-06-01 00:09            17.66    8.04             9.64   290.81\n3 2021-06-01 00:19            18.03    8.12            11.30   291.18\n4 2021-06-01 00:27            18.08    8.14            11.32   291.23\n5 2021-06-01 00:39            18.06    8.12            11.06   291.21\n6 2021-06-01 00:49            18.01    8.10            10.91   291.16\n7 2021-06-01 00:59            18.02    8.10            10.96   291.17\n8 2021-06-01 01:08            18.06    8.10            10.83   291.21\n\n# summarise - summarises data\nsummarise(aasee, minimum_t = min(Wassertemperatur))\n\n  minimum_t\n1     17.66\n\n\nThe functions itself could all be realized with base R functions:\n\n# the same in base R\n\n# select\naasee$Wassertemperatur\n\n[1] 17.98 17.66 18.03 18.08 18.06 18.01 18.02 18.06\n\n# filter\naasee[,aasee$Wassertemperatur &lt; 18]\n\n             Datum Wassertemperatur\n1 2021-05-31 23:57            17.98\n2 2021-06-01 00:09            17.66\n3 2021-06-01 00:19            18.03\n4 2021-06-01 00:27            18.08\n5 2021-06-01 00:39            18.06\n6 2021-06-01 00:49            18.01\n7 2021-06-01 00:59            18.02\n8 2021-06-01 01:08            18.06\n\n# mutate\naasee$t_kelvin = aasee$Wassertemperatur + 273.15\n\n# summarise\nmin(aasee$Wassertemperatur)\n\n[1] 17.66\n\n\nThe strength of dplyr is the possibility to chain functions with %&gt;% or |&gt;.\n\naasee|&gt; \n    filter(Wassertemperatur &lt; 18) |&gt; \n    select(pH.Wert) |&gt;  \n    max()\n\n[1] 8.05\n\n\nWith base R functions this looks messy, because we have to use functions inside functions.\n\nmax(aasee$pH.Wert[aasee$Wassertemperatur &lt; 18])\n\n[1] 8.05",
    "crumbs": [
      "Dataframes",
      "Introduction to tidyverse"
    ]
  },
  {
    "objectID": "R04_logic.html",
    "href": "R04_logic.html",
    "title": "Logical Operators",
    "section": "",
    "text": "Logical Operators are essential to efficiently work with R. It is a good idea to spent some time with them and think about their possibilities and usage.\nBut first: what are logical operators? They are used to compare values. The most intuitive ones are the &lt; and &gt; operators.\n\n4 &lt; 5\n\n[1] TRUE\n\n6 &gt; 2\n\n[1] TRUE\n\n\nAs you see, both statements return the value TRUE because, …well… 4 is smaller than 5 and 6 is larger then 2. As you might guess, if there is TRUE there should also be FALSE.\n\n24 &gt; 50\n\n[1] FALSE\n\n\nLogical operators will always return TRUE or FALSE, so the statements you make with them are always questions which you can answer as TRUE or FALSE. As a data type, this is called a logical (or sometimes boolean value after the British mathematician George Boole).\n\nbool &lt;- 24 &lt; 50\nclass(bool)\n\n[1] \"logical\"\n\n\nTo ask the question if two values are the same we use the operator ==:\n\n1.9999999 == 2\n\n[1] FALSE\n\na = 5 # one '=' means assignment\na == 5 # two '==' is the logical operator for \"is equal\"\n\n[1] TRUE\n\n\n\n\nLogical operators are vectorized. This means that when we ask the question “Is the vector larger than 10?”, we get as many TRUE and FALSE answers as there are elements in the vector.\n\n\n\n\n\nR vector logical operation\n\n\n\n\n\nvec = c(23, 1, 60, 21, 21, 5)\nvec &gt; 10\n\n[1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE\n\n\nIf we safe these answers in the a new variable, we can use the result to subset the vector. So the questions “Is the vector larger than 10?” serves as an important step to do the operation “Give me all the numbers of this vector that are larger than 10!”.\n\nlarge = vec &gt; 10\nvec[large]\n\n[1] 23 60 21 21\n\n# in short, we combine both steps to\nvec[vec &gt; 10]\n\n[1] 23 60 21 21",
    "crumbs": [
      "Basics",
      "Logical Operators"
    ]
  },
  {
    "objectID": "R04_logic.html#logical-operators-and-vectors",
    "href": "R04_logic.html#logical-operators-and-vectors",
    "title": "Logical Operators",
    "section": "",
    "text": "Logical operators are vectorized. This means that when we ask the question “Is the vector larger than 10?”, we get as many TRUE and FALSE answers as there are elements in the vector.\n\n\n\n\n\nR vector logical operation\n\n\n\n\n\nvec = c(23, 1, 60, 21, 21, 5)\nvec &gt; 10\n\n[1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE\n\n\nIf we safe these answers in the a new variable, we can use the result to subset the vector. So the questions “Is the vector larger than 10?” serves as an important step to do the operation “Give me all the numbers of this vector that are larger than 10!”.\n\nlarge = vec &gt; 10\nvec[large]\n\n[1] 23 60 21 21\n\n# in short, we combine both steps to\nvec[vec &gt; 10]\n\n[1] 23 60 21 21",
    "crumbs": [
      "Basics",
      "Logical Operators"
    ]
  },
  {
    "objectID": "R02_basics.html",
    "href": "R02_basics.html",
    "title": "Variables, Values, Functions",
    "section": "",
    "text": "assign values to variables either with &lt;- or =\nvariable on the left, assigned value on the right\nYou decide how to name a variable.\n\nUse recognizable names!\nDon’t be lazy. Longer, descriptive names help immensely.\n\n\n\na &lt;- 5\nb = 10\n\na_big_number = 500000\n\n\n\n\n\nHow is data represented in R?\nTypes we need right now:\n\nnumeric\ncharacter (string / text)\nlogical\n“nothing”\n\n\n\n# numeric\n1\n68542\n4.5\n\n\n# character\n\"f\"\n\"Hi Mom!\"\n\n# logical\nTRUE\nF\n\n# nothing\nNA # there should be something, but it is missing\nNULL # truly nothing\n\n\n\n\n\nEverything you do in R is a function!\nEasily identified by function name followed by parenthesis (), e.g. print()\nfor common functions there are shortcuts\n\n\n# the class() function returns the type of the input\na &lt;- 5\nclass(a)\n\n[1] \"numeric\"\n\n# the nchar() function returns the number of characters in a string\nnchar(\"Hi Mom\")\n\n[1] 6\n\n# Really everything you do in R is a function!\n`&lt;-`(b, 10)\nprint(b)\n\n[1] 10\n\n\n\nmost functions need arguments\ninput, options, parameters to specify what the function should do\neach function has a help page where you can read about arguments\n\nFor example, the cos() function computes the cosine of a number. The help page specifies what the function expects as an input. You can access the help page with ?cos() or by searching for the function in the ‘Help’ tab in Rstudio (bottom right panel).\n\n# the cos function needs the argument x of type numeric\ncos(x = 0)\n\n[1] 1\n\n# it throws an error otherwise\ncos(x = \"3.14\")\n\nError in cos(x = \"3.14\"): non-numeric argument to mathematical function\n\n# argument names can be neglected\ncos(1)\n\n[1] 0.5403023",
    "crumbs": [
      "Basics",
      "Variables, Values, Functions"
    ]
  },
  {
    "objectID": "R02_basics.html#variables",
    "href": "R02_basics.html#variables",
    "title": "Variables, Values, Functions",
    "section": "",
    "text": "assign values to variables either with &lt;- or =\nvariable on the left, assigned value on the right\nYou decide how to name a variable.\n\nUse recognizable names!\nDon’t be lazy. Longer, descriptive names help immensely.\n\n\n\na &lt;- 5\nb = 10\n\na_big_number = 500000",
    "crumbs": [
      "Basics",
      "Variables, Values, Functions"
    ]
  },
  {
    "objectID": "R02_basics.html#values",
    "href": "R02_basics.html#values",
    "title": "Variables, Values, Functions",
    "section": "",
    "text": "How is data represented in R?\nTypes we need right now:\n\nnumeric\ncharacter (string / text)\nlogical\n“nothing”\n\n\n\n# numeric\n1\n68542\n4.5\n\n\n# character\n\"f\"\n\"Hi Mom!\"\n\n# logical\nTRUE\nF\n\n# nothing\nNA # there should be something, but it is missing\nNULL # truly nothing",
    "crumbs": [
      "Basics",
      "Variables, Values, Functions"
    ]
  },
  {
    "objectID": "R02_basics.html#functions",
    "href": "R02_basics.html#functions",
    "title": "Variables, Values, Functions",
    "section": "",
    "text": "Everything you do in R is a function!\nEasily identified by function name followed by parenthesis (), e.g. print()\nfor common functions there are shortcuts\n\n\n# the class() function returns the type of the input\na &lt;- 5\nclass(a)\n\n[1] \"numeric\"\n\n# the nchar() function returns the number of characters in a string\nnchar(\"Hi Mom\")\n\n[1] 6\n\n# Really everything you do in R is a function!\n`&lt;-`(b, 10)\nprint(b)\n\n[1] 10\n\n\n\nmost functions need arguments\ninput, options, parameters to specify what the function should do\neach function has a help page where you can read about arguments\n\nFor example, the cos() function computes the cosine of a number. The help page specifies what the function expects as an input. You can access the help page with ?cos() or by searching for the function in the ‘Help’ tab in Rstudio (bottom right panel).\n\n# the cos function needs the argument x of type numeric\ncos(x = 0)\n\n[1] 1\n\n# it throws an error otherwise\ncos(x = \"3.14\")\n\nError in cos(x = \"3.14\"): non-numeric argument to mathematical function\n\n# argument names can be neglected\ncos(1)\n\n[1] 0.5403023",
    "crumbs": [
      "Basics",
      "Variables, Values, Functions"
    ]
  },
  {
    "objectID": "E10_markdown.html",
    "href": "E10_markdown.html",
    "title": "Ex10: Learning Log",
    "section": "",
    "text": "Ex10: Learning Log\nZeige was du im Kurs gelernt hast. Analysiere und Visualisiere einen beliebigen (ökologischen) Datensatz und dokumentiere den Code und die Ergebnisse.\n\nErstelle dazu ein rmd oder qmd Dokument mit R Markdown oder quarto.\nNutze mindestens einen Datensatz.\nErstelle mindestens 4 Code Blöcke.\nErstelle mindestens einen Plot.\nRendere dein Dokument als pdf oder html.",
    "crumbs": [
      "Graphics",
      "Ex10: Learning Log"
    ]
  },
  {
    "objectID": "E09_biodiversity.html",
    "href": "E09_biodiversity.html",
    "title": "Bonus Exercise: Biodiversity",
    "section": "",
    "text": "Bonus Exercise: Biodiversity\nBearbeite die folgenden Fragen mit der Datei muenster_trees.csv.\nFür die Aufgaben nutze das vegan Paket. R Pakete kommen oft mit sogenannten Vignetten - Anleitungen und Erklärungen zu Funktionen. Nutze die Vignette diversity-vegan um die folgenden Aufgaben zu meistern. Weitere Erklärungen und Grafiken auf https://www.rpubs.com/roalle/mres_2019.\nHinweis: Für die meisten Funktionen in vegan wird eine sogenannte community matrix benötigt. Jede Reihe ist ein Bezirk, jede Spalte eine Art. In den Zellen dann entsprechend die Abundanzen. Siehe data(BCI) für eine Formatvorlage.\n\ntrees = read.csv(\"data/muenster_trees.csv\")\n\nlibrary(vegan)\nlibrary(tidyverse)\n\n# Kontingenztabelle\ncont = table(trees$district, trees$species)\ncont_df = as.data.frame.array(cont)\n\n\nWelcher Bezirk hat die diverseste Baumflora? Berechne dazu für alle Bezirke die Alpha Diversität in Form von:\n\nSpecies Richness\nShannon Index.\nPielou’s Evenness.\n\n\n\nBerechne die Beta Diversität der Bäume Münsters. (Sørensen index of dissimilarity)\n\n\nBerechne die Gamma Diversität der Bäume Münsters.\n\n\nIn welchen Bezirken Münsters stehen endemische Baumarten? (vegan nicht nötig)\n\nWas ist ein Endemit/ eine endemische Art? Endemiten sind Arten, die lediglich in einem eng umgrenzten Gebiet oder in einer bestimmten Region vorkommen. Quelle",
    "crumbs": [
      "Utility \n & Applications",
      "Bonus Exercise: Biodiversity"
    ]
  },
  {
    "objectID": "E07_lm.html",
    "href": "E07_lm.html",
    "title": "Ex07: Species vs. Area",
    "section": "",
    "text": "Ex07: Species vs. Area\nNutze die Dateien muenster_districts.csv und muenster_trees.csv aus dem Learnweb für die folgenden Aufgaben.\n\nNutze dplyr::group_by und dplyr::summarise um die Anzahl der Bäume pro Bezirk zu berechnen.\nMit einem join Befehl (z.B. dplyr::left_join) oder merge können mehrere Tabellen zusammengefügt werden. Erstelle damit eine Tabelle die mindestens folgende Informationen enthält: Bezirksname, Bezirksgröße, Anzahl der Bäume im Bezirk.\n\n\nErstelle einen Scatterplot aus Bezirksgröße und Anzahl der Bäume im Bezirk.\nErstelle ein lineares Model um den Zusammenhang zwischen Bezirksgröße und Anzahl der Bäume im Bezirk zu berechnen.\nErstelle ein Histogramm der Residuen des Models.\n\n\nLogarithmiere Bezirksgröße und Anzahl der Bäume im Bezirk (log10()). Erstelle dann den Scatterplot erneut mit den logarithmierten Werten.\n\n\nErstelle ein lineares Model um den Zusammenhang zwischen logarithmierten Bezirksgröße und Anzahl der Bäume im Bezirk zu berechnen.\nSind die Residuen des Models normalverteilt?\n\n\nBonus: Wie viele Bäume stehen Erwartungsgemäß in einem Bezirk der 10000000 qm groß ist?",
    "crumbs": [
      "Utility \n & Applications",
      "Ex07: Species vs. Area"
    ]
  },
  {
    "objectID": "E05_tidyverse.html",
    "href": "E05_tidyverse.html",
    "title": "Ex04b: Trees, Districts and the tidyverse",
    "section": "",
    "text": "Im Learnweb finden sich die Dateien muenster_districts.csv und muenster_trees.csv. Sie beinhalten Informationen zu den Stadtbezirken und Bäumen in Münster.\n\nBearbeite die unten stehenden Aufgaben mit dplyr Funktionen und pipes |&gt; bzw. %&gt;% !\n\n\n\n\nWie groß ist die Bezirksgruppe “Altstadt” (Fläche)?\n\n\nZu welcher Bezirksgruppe gehört der Bezirk “Schloss”?\n\n\nAus welchen Bezirken besteht die Bezirksgruppe “Münster-West”?\n\n\nErstelle eine Tabelle die für jede Bezirksgruppe den Mittelwert und die Standardabweichung der Fläche der jeweiligen Bezirke berechnet. Nutze dafür die Funktionen dplyr::group_by() und dplyr::summarise()\n\n\n\n\n\nWie viele Baumarten gibt es in Münster?\n\n\nWie viele Buchen (species: Fagus) gibt es in Münster?\n\n\nErstelle eine Tabelle die für jeden Bezirk die Anzahl unterschiedlicher Baumarten angibt. Nutze dafür die Funktionen dplyr::group_by() und dplyr::summarise()",
    "crumbs": [
      "Dataframes",
      "Ex04b: Trees, Districts and the tidyverse"
    ]
  },
  {
    "objectID": "E05_tidyverse.html#münsters-bezirke",
    "href": "E05_tidyverse.html#münsters-bezirke",
    "title": "Ex04b: Trees, Districts and the tidyverse",
    "section": "",
    "text": "Wie groß ist die Bezirksgruppe “Altstadt” (Fläche)?\n\n\nZu welcher Bezirksgruppe gehört der Bezirk “Schloss”?\n\n\nAus welchen Bezirken besteht die Bezirksgruppe “Münster-West”?\n\n\nErstelle eine Tabelle die für jede Bezirksgruppe den Mittelwert und die Standardabweichung der Fläche der jeweiligen Bezirke berechnet. Nutze dafür die Funktionen dplyr::group_by() und dplyr::summarise()",
    "crumbs": [
      "Dataframes",
      "Ex04b: Trees, Districts and the tidyverse"
    ]
  },
  {
    "objectID": "E05_tidyverse.html#münsters-bäume",
    "href": "E05_tidyverse.html#münsters-bäume",
    "title": "Ex04b: Trees, Districts and the tidyverse",
    "section": "",
    "text": "Wie viele Baumarten gibt es in Münster?\n\n\nWie viele Buchen (species: Fagus) gibt es in Münster?\n\n\nErstelle eine Tabelle die für jeden Bezirk die Anzahl unterschiedlicher Baumarten angibt. Nutze dafür die Funktionen dplyr::group_by() und dplyr::summarise()",
    "crumbs": [
      "Dataframes",
      "Ex04b: Trees, Districts and the tidyverse"
    ]
  },
  {
    "objectID": "E03_dataframes.html",
    "href": "E03_dataframes.html",
    "title": "Ex03: iris",
    "section": "",
    "text": "Zum Testen von Funktionen und zur Übung stellt R verschiedene Datensätze zur Verfügung. Der wohl bekannteste Datensatz davon ist iris er kann folgendermaßen geladen werden:\n\ndata(iris)\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\nTeste folgende Funktionen mit dem Iris Datensatz: length(), nrow(), ncol(), summary(), colnames().\nSpeichere die Species Spalte in einer neuen Variablen. Um was für ein R Objekt handelt es sich nun?\nWie viele Species sind im Datensatz enthalten und wie oft kommt jede Species vor?\n\n\n\n\n\nErstelle einen neuen data.frame der nur die Beobachtungen der Species “virginica” enthält.\nErstelle einen neuen data.frame der nur die Beobachtungen der Species “setosa” und “versicolor” enthält.\nErstelle einen neuen data.frame der extakt die erste Hälfte der Beobachtungen enthält.\nErstelle einen neuen data.frame der nur Beobachtungen enthält mit einer Sepal.Length zwischen 5.5 und 7.\n\n\n\n\n\nFüge dem iris data.frame eine neue Spalte names “Genus” hinzu die in allen Reihen das Wort “iris” enthält.\nFüge dem iris data.frame eine neue Spalte names “ID” hinzu in der jede Reihe eine fortlaufende Zahl enthält.\nFüge dem iris data.frame zwei neue Spalten hinzu die jeweils den Flächeninhalt der Sepal und Petal beinhaltet (also length x width).\n\n\n\n\n\nWas ist die durchschnittliche Sepal.Length von “virginica”?\nZeichne ein Histogramm der Sepal.Width.\nBerechne die Varianz und Standardabweichung der Sepal.Width.\nZeichne einen Scatterplot mit der Sepal.Length auf der x-Achse und der Petal.Length auf der y-Achse.\n\n\nTipp 1: Data.frames können als 2-Dimensionale Vektoren aufgefasst werden. Subsetting von data.frames benötigen deshalb 2 Werte, einen für die Reihe, einen für die Spalte. Das kann natürlich mit Logischen Operatoren verbunden werden.\n\n# row 1, column 2\niris[1,2]\n\n[1] 3.5\n\n# the first row, empty means \"everything\"\niris[1,]\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n\n# the first 3 rows, column 3 and 4\niris[seq(3), c(3,4)]\n\n  Petal.Length Petal.Width\n1          1.4         0.2\n2          1.4         0.2\n3          1.3         0.2\n\n\nTipp 2: Einzele Spalten können mit $ angewählt werden. So können auch neue Spalten angelegt werden in dem nach dem $ ein name vergeben wird, der noch nicht im dataframe existiert.\n\niris$Sepal.Length\n\n  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n[109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n[127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n[145] 6.7 6.7 6.3 6.5 6.2 5.9\n\niris$Family &lt;- \"Iridaceae\"\n\nTipp 3: Googlen!",
    "crumbs": [
      "Dataframes",
      "Ex03: iris"
    ]
  },
  {
    "objectID": "E03_dataframes.html#dataframes",
    "href": "E03_dataframes.html#dataframes",
    "title": "Ex03: iris",
    "section": "",
    "text": "Zum Testen von Funktionen und zur Übung stellt R verschiedene Datensätze zur Verfügung. Der wohl bekannteste Datensatz davon ist iris er kann folgendermaßen geladen werden:\n\ndata(iris)\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\nTeste folgende Funktionen mit dem Iris Datensatz: length(), nrow(), ncol(), summary(), colnames().\nSpeichere die Species Spalte in einer neuen Variablen. Um was für ein R Objekt handelt es sich nun?\nWie viele Species sind im Datensatz enthalten und wie oft kommt jede Species vor?",
    "crumbs": [
      "Dataframes",
      "Ex03: iris"
    ]
  },
  {
    "objectID": "E03_dataframes.html#dataframe-subsetting",
    "href": "E03_dataframes.html#dataframe-subsetting",
    "title": "Ex03: iris",
    "section": "",
    "text": "Erstelle einen neuen data.frame der nur die Beobachtungen der Species “virginica” enthält.\nErstelle einen neuen data.frame der nur die Beobachtungen der Species “setosa” und “versicolor” enthält.\nErstelle einen neuen data.frame der extakt die erste Hälfte der Beobachtungen enthält.\nErstelle einen neuen data.frame der nur Beobachtungen enthält mit einer Sepal.Length zwischen 5.5 und 7.",
    "crumbs": [
      "Dataframes",
      "Ex03: iris"
    ]
  },
  {
    "objectID": "E03_dataframes.html#dataframe-additions",
    "href": "E03_dataframes.html#dataframe-additions",
    "title": "Ex03: iris",
    "section": "",
    "text": "Füge dem iris data.frame eine neue Spalte names “Genus” hinzu die in allen Reihen das Wort “iris” enthält.\nFüge dem iris data.frame eine neue Spalte names “ID” hinzu in der jede Reihe eine fortlaufende Zahl enthält.\nFüge dem iris data.frame zwei neue Spalten hinzu die jeweils den Flächeninhalt der Sepal und Petal beinhaltet (also length x width).",
    "crumbs": [
      "Dataframes",
      "Ex03: iris"
    ]
  },
  {
    "objectID": "E03_dataframes.html#ein-bisschen-statistik",
    "href": "E03_dataframes.html#ein-bisschen-statistik",
    "title": "Ex03: iris",
    "section": "",
    "text": "Was ist die durchschnittliche Sepal.Length von “virginica”?\nZeichne ein Histogramm der Sepal.Width.\nBerechne die Varianz und Standardabweichung der Sepal.Width.\nZeichne einen Scatterplot mit der Sepal.Length auf der x-Achse und der Petal.Length auf der y-Achse.\n\n\nTipp 1: Data.frames können als 2-Dimensionale Vektoren aufgefasst werden. Subsetting von data.frames benötigen deshalb 2 Werte, einen für die Reihe, einen für die Spalte. Das kann natürlich mit Logischen Operatoren verbunden werden.\n\n# row 1, column 2\niris[1,2]\n\n[1] 3.5\n\n# the first row, empty means \"everything\"\niris[1,]\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n\n# the first 3 rows, column 3 and 4\niris[seq(3), c(3,4)]\n\n  Petal.Length Petal.Width\n1          1.4         0.2\n2          1.4         0.2\n3          1.3         0.2\n\n\nTipp 2: Einzele Spalten können mit $ angewählt werden. So können auch neue Spalten angelegt werden in dem nach dem $ ein name vergeben wird, der noch nicht im dataframe existiert.\n\niris$Sepal.Length\n\n  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n[109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n[127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n[145] 6.7 6.7 6.3 6.5 6.2 5.9\n\niris$Family &lt;- \"Iridaceae\"\n\nTipp 3: Googlen!",
    "crumbs": [
      "Dataframes",
      "Ex03: iris"
    ]
  },
  {
    "objectID": "E01_variablen.html",
    "href": "E01_variablen.html",
    "title": "Ex01: First Steps",
    "section": "",
    "text": "Erstelle eine Variable die die Zahl 1650 enthält.\nErstelle eine Variable die die Zahl 140 enthält.\nErstelle eine Variable die die Zahl 5 enthält.\nBerechne das Produkt deiner erstellten Variablen.\nBerechne den Mittelwert deiner erstellten Variablen.\n\n\nErstelle eine Variable die deinen Vornamen enthält.\nErstelle eine Variable die deinen Nachnamen enthält.\nDie paste Funktion kann Texte zusammenfügen. Probiere die Funktion mit den Variablen die deine Namen enthalten aus.\n\n\n\n\n\nVektoren in R sind Folgen von Werten, enthalten also z.B. mehrere Zahlen. Sie werden mit der Funktion c() erstellt:\n\n\nnumbers = c(4, 3, 8, 90, 16)\nnumbers\n\n[1]  4  3  8 90 16\n\n\n\nTeste die Funktionen length(), sum(), sqrt(), und min() mit dem Vektor.\nWas macht die sqrt() Funktion?\nWas ist der Unterschied zwischen der max() Funktion und der which.max() Funktion?\n\n\nDie seq() Funktion erzeugt einen Vektor der Zahlenfolgenfolgen enthält. Sieh dir die Hilfeseite von seq() an und erstelle einen Vektor der alle 100er Zahlen von 0 bis 10000 enthält (also 0, 100, 200, … ,9900, 10000).",
    "crumbs": [
      "Basics",
      "Ex01: First Steps"
    ]
  },
  {
    "objectID": "E01_variablen.html#variablen",
    "href": "E01_variablen.html#variablen",
    "title": "Ex01: First Steps",
    "section": "",
    "text": "Erstelle eine Variable die die Zahl 1650 enthält.\nErstelle eine Variable die die Zahl 140 enthält.\nErstelle eine Variable die die Zahl 5 enthält.\nBerechne das Produkt deiner erstellten Variablen.\nBerechne den Mittelwert deiner erstellten Variablen.\n\n\nErstelle eine Variable die deinen Vornamen enthält.\nErstelle eine Variable die deinen Nachnamen enthält.\nDie paste Funktion kann Texte zusammenfügen. Probiere die Funktion mit den Variablen die deine Namen enthalten aus.",
    "crumbs": [
      "Basics",
      "Ex01: First Steps"
    ]
  },
  {
    "objectID": "E01_variablen.html#funktionen",
    "href": "E01_variablen.html#funktionen",
    "title": "Ex01: First Steps",
    "section": "",
    "text": "Vektoren in R sind Folgen von Werten, enthalten also z.B. mehrere Zahlen. Sie werden mit der Funktion c() erstellt:\n\n\nnumbers = c(4, 3, 8, 90, 16)\nnumbers\n\n[1]  4  3  8 90 16\n\n\n\nTeste die Funktionen length(), sum(), sqrt(), und min() mit dem Vektor.\nWas macht die sqrt() Funktion?\nWas ist der Unterschied zwischen der max() Funktion und der which.max() Funktion?\n\n\nDie seq() Funktion erzeugt einen Vektor der Zahlenfolgenfolgen enthält. Sieh dir die Hilfeseite von seq() an und erstelle einen Vektor der alle 100er Zahlen von 0 bis 10000 enthält (also 0, 100, 200, … ,9900, 10000).",
    "crumbs": [
      "Basics",
      "Ex01: First Steps"
    ]
  },
  {
    "objectID": "D01_data_examples_slides.html#what-is-ecological-data",
    "href": "D01_data_examples_slides.html#what-is-ecological-data",
    "title": "Analysis of Ecological Data",
    "section": "What is ecological data?",
    "text": "What is ecological data?"
  },
  {
    "objectID": "D01_data_examples_slides.html#are-bats-in-forests-bigger",
    "href": "D01_data_examples_slides.html#are-bats-in-forests-bigger",
    "title": "Analysis of Ecological Data",
    "section": "Are bats in forests bigger?",
    "text": "Are bats in forests bigger?\nWhat do we need to answer this question?"
  },
  {
    "objectID": "D01_data_examples_slides.html#plot-surverys",
    "href": "D01_data_examples_slides.html#plot-surverys",
    "title": "Analysis of Ecological Data",
    "section": "Plot surverys",
    "text": "Plot surverys"
  },
  {
    "objectID": "D01_data_examples_slides.html#plot-surveys",
    "href": "D01_data_examples_slides.html#plot-surveys",
    "title": "Analysis of Ecological Data",
    "section": "Plot surveys",
    "text": "Plot surveys\n\n\n\n\n\n\n\nField survery data on a plot\n\n\nplotID\nland_cover\nbats\n\n\n\n\nF1\nforest\n7\n\n\nF2\nforest\n2\n\n\nA1\narable\n4"
  },
  {
    "objectID": "D01_data_examples_slides.html#time-series",
    "href": "D01_data_examples_slides.html#time-series",
    "title": "Analysis of Ecological Data",
    "section": "Time Series",
    "text": "Time Series"
  },
  {
    "objectID": "D01_data_examples_slides.html#time-series-1",
    "href": "D01_data_examples_slides.html#time-series-1",
    "title": "Analysis of Ecological Data",
    "section": "Time Series",
    "text": "Time Series\n\n\n\n\n\nquasi continuous measurements\nmeasurement interval\nclimate, soil, remote sensing\n\n\n\n\n\n\n\ntime\ntemperature\n\n\n\n\n12:00\n18.3\n\n\n12:15\n18.5\n\n\n12:30\n18.6"
  },
  {
    "objectID": "D01_data_examples_slides.html#time-series-2",
    "href": "D01_data_examples_slides.html#time-series-2",
    "title": "Analysis of Ecological Data",
    "section": "Time Series",
    "text": "Time Series\n\nVisualization of time series data"
  },
  {
    "objectID": "D01_data_examples_slides.html#species-lists",
    "href": "D01_data_examples_slides.html#species-lists",
    "title": "Analysis of Ecological Data",
    "section": "Species Lists",
    "text": "Species Lists\n\n\n\n\n\n\n\nVegetation of F1\n\n\nspecies\nn\n\n\n\n\nDigitalis purpurea\n4\n\n\nGalium odoratum\n25\n\n\nFagus Sylvatica\n20"
  },
  {
    "objectID": "D01_data_examples_slides.html#geospatial-data",
    "href": "D01_data_examples_slides.html#geospatial-data",
    "title": "Analysis of Ecological Data",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\ndefined by explicit location on the earth surface\ninformation attached to coordinates\n\n\n\n\nGeospatial Data: Tree locations\n\n\n\n\n\n\n\n\n\n\ntree_id\neasting\nnorthing\nspecies_code\ndbh\ngeom\n\n\n\n\nr00430\n477422.4\n5631970\nBUR\n0.12\nPOINT (477422.4 5631970)\n\n\nr01106\n477411.7\n5631946\nBUR\n0.68\nPOINT (477411.7 5631946)\n\n\nb00818\n477796.0\n5632316\nBUR\n0.23\nPOINT (477796 5632316)\n\n\nr00170\n477816.9\n5632201\nEIT\n0.59\nPOINT (477816.9 5632201)\n\n\nr00334\n477737.2\n5632250\nERS\n0.68\nPOINT (477737.2 5632250)\n\n\nr00301\n477774.5\n5632254\nBUR\n0.14\nPOINT (477774.5 5632254)\n\n\nr00928\n477800.0\n5632218\nBUR\n0.14\nPOINT (477800 5632218)\n\n\nr00300\n477778.0\n5632256\nBUR\n0.18\nPOINT (477778 5632256)\n\n\nr00285\n477841.2\n5632343\nBUR\n0.73\nPOINT (477841.2 5632343)\n\n\nr00454\n477437.7\n5631978\nBUR\n0.14\nPOINT (477437.7 5631978)\n\n\nr01336\n477465.9\n5631990\nBUR\n0.16\nPOINT (477465.9 5631990)\n\n\nb00895\n477788.9\n5632255\nEIT\n0.48\nPOINT (477788.9 5632255)\n\n\nb00556\n477773.5\n5632252\nEIT\n0.46\nPOINT (477773.5 5632252)\n\n\nb00279\n477885.3\n5632257\nBUR\n0.23\nPOINT (477885.3 5632257)\n\n\nr00317\n477756.5\n5632239\nBUR\n0.34\nPOINT (477756.5 5632239)\n\n\nr01415\n477378.8\n5631974\nBUR\n0.48\nPOINT (477378.8 5631974)\n\n\nr00505\n477867.0\n5632309\nEIT\n0.50\nPOINT (477867 5632309)\n\n\nr00493\n477869.2\n5632294\nBUR\n0.48\nPOINT (477869.2 5632294)\n\n\nb00954\n477871.8\n5632209\nBUR\n0.15\nPOINT (477871.8 5632209)\n\n\nr00254\n477411.0\n5632004\nBUR\n0.20\nPOINT (477411 5632004)\n\n\nr01068\n477525.5\n5632029\nBUR\n0.49\nPOINT (477525.5 5632029)\n\n\nb00487\n477788.5\n5632278\nEIT\n0.43\nPOINT (477788.5 5632278)\n\n\nr01125\n477442.6\n5632016\nBUR\n0.58\nPOINT (477442.6 5632016)\n\n\nb00890\n477797.6\n5632235\nEIT\n0.39\nPOINT (477797.6 5632235)\n\n\nb00856\n477779.1\n5632268\nBUR\n0.22\nPOINT (477779.1 5632268)"
  },
  {
    "objectID": "D01_data_examples_slides.html#geospatial-data-1",
    "href": "D01_data_examples_slides.html#geospatial-data-1",
    "title": "Analysis of Ecological Data",
    "section": "Geospatial Data",
    "text": "Geospatial Data"
  },
  {
    "objectID": "D01_data_examples_slides.html#want-more",
    "href": "D01_data_examples_slides.html#want-more",
    "title": "Analysis of Ecological Data",
    "section": "Want more?",
    "text": "Want more?\n{width = 50%}\n\nAnimal movement data\nLab / Field experiments\nIndividuum based information (e.g. traits)\nCamera Traps\nSocio-Economic data (also useful for landscape ecology)\n…"
  },
  {
    "objectID": "D01_data_examples_slides.html#section-1",
    "href": "D01_data_examples_slides.html#section-1",
    "title": "Analysis of Ecological Data",
    "section": "",
    "text": "Turner, W. 2014. “Sensing Biodiversity.” Science 346 (6207): 301–2. https://doi.org/10.1126/science.1256014."
  },
  {
    "objectID": "D01_data_examples.html",
    "href": "D01_data_examples.html",
    "title": "What is ecological data?",
    "section": "",
    "text": "What is ecological data?",
    "crumbs": [
      "Basics",
      "What is ecological data?"
    ]
  },
  {
    "objectID": "D02_projects_io.html",
    "href": "D02_projects_io.html",
    "title": "R Projects and Data I/O",
    "section": "",
    "text": "Once you deal with external files (e.g. loading a .csv), saving outputs or reports, you have to deal with directory and file structure. This is often harder than the actual R code itself. To keep everything easy and consistent within R (at least for this course), I recommend using Rstudio Projects with a standardized directory setup.\n\n\nHere is an example from a blog entry at r-bloggers.com\n\n\n\nA good starting point for project setup\n\n\nInside a project, you can then use relative paths to files.\n\n# Example of absolute path\n\n## Linux\n\"/home/marvin/projects/rcourse/session02/data/file.csv\"\n\n## Windows\n\"C:\\Users\\Marvin\\Dokumente\\rcourse\\session02\\data\\file.csv\"\n\n# If the R project is set up in the \"session02\" directory we can use relative paths:\n\n# relative path to project root\ndata = read.csv(\"data/file.csv\")\n\n\n\n\nDataframes can be loaded from and saved to .csv files.\n\nComma Separated Values\nCaution: In Germany “,” is used as the decimal point. You often find “;” as the delimiter in csvs.\nCaution: If you open csv files in Excel, things can get messy\n\nDatum,Wassertemperatur,pH-Wert,Sauerstoffgehalt\n2021-05-31 23:57,17.98,8.05,10.53\n2021-06-01 00:09,17.66,8.04,9.64\n2021-06-01 00:19,18.03,8.12,11.30\n2021-06-01 00:27,18.08,8.14,11.32\n2021-06-01 00:39,18.06,8.12,11.06\n2021-06-01 00:49,18.01,8.10,10.91\n\nuse the read.csv function\nmake sure the dec and sep parameters of the function are properly set\nwhen in doubt look at the help page ?read.csv\n\n\n\n\n\nalways keep raw data\nbackups!\nfilepaths:\n\nno spaces\nno dots\nno weird characters\n\nHow to name files\nWindows (sometimes) uses backslash \\, R wants forward slash /\nyou can use the dir.create function to create a new empty directory",
    "crumbs": [
      "Dataframes",
      "R Projects and Data I/O"
    ]
  },
  {
    "objectID": "D02_projects_io.html#r-studio-projects",
    "href": "D02_projects_io.html#r-studio-projects",
    "title": "R Projects and Data I/O",
    "section": "",
    "text": "Here is an example from a blog entry at r-bloggers.com\n\n\n\nA good starting point for project setup\n\n\nInside a project, you can then use relative paths to files.\n\n# Example of absolute path\n\n## Linux\n\"/home/marvin/projects/rcourse/session02/data/file.csv\"\n\n## Windows\n\"C:\\Users\\Marvin\\Dokumente\\rcourse\\session02\\data\\file.csv\"\n\n# If the R project is set up in the \"session02\" directory we can use relative paths:\n\n# relative path to project root\ndata = read.csv(\"data/file.csv\")",
    "crumbs": [
      "Dataframes",
      "R Projects and Data I/O"
    ]
  },
  {
    "objectID": "D02_projects_io.html#csv-files",
    "href": "D02_projects_io.html#csv-files",
    "title": "R Projects and Data I/O",
    "section": "",
    "text": "Dataframes can be loaded from and saved to .csv files.\n\nComma Separated Values\nCaution: In Germany “,” is used as the decimal point. You often find “;” as the delimiter in csvs.\nCaution: If you open csv files in Excel, things can get messy\n\nDatum,Wassertemperatur,pH-Wert,Sauerstoffgehalt\n2021-05-31 23:57,17.98,8.05,10.53\n2021-06-01 00:09,17.66,8.04,9.64\n2021-06-01 00:19,18.03,8.12,11.30\n2021-06-01 00:27,18.08,8.14,11.32\n2021-06-01 00:39,18.06,8.12,11.06\n2021-06-01 00:49,18.01,8.10,10.91\n\nuse the read.csv function\nmake sure the dec and sep parameters of the function are properly set\nwhen in doubt look at the help page ?read.csv",
    "crumbs": [
      "Dataframes",
      "R Projects and Data I/O"
    ]
  },
  {
    "objectID": "D02_projects_io.html#additional-thoughts",
    "href": "D02_projects_io.html#additional-thoughts",
    "title": "R Projects and Data I/O",
    "section": "",
    "text": "always keep raw data\nbackups!\nfilepaths:\n\nno spaces\nno dots\nno weird characters\n\nHow to name files\nWindows (sometimes) uses backslash \\, R wants forward slash /\nyou can use the dir.create function to create a new empty directory",
    "crumbs": [
      "Dataframes",
      "R Projects and Data I/O"
    ]
  },
  {
    "objectID": "E02_vectors_logic.html",
    "href": "E02_vectors_logic.html",
    "title": "Ex02: Second Steps",
    "section": "",
    "text": "Der folgende Vektor enthält Temperaturdaten vom Aasee in Münster vom 2021-06-02.\n\ntemperature &lt;- c(18.81,18.73,18.92,18.87,18.76,18.79,18.87,18.84,18.89,18.89,\n                 18.93,18.95,18.92,18.97,19.00,18.99,19.00,19.00,18.99,19.00,\n                 18.98,18.97,18.97,18.97,18.97,18.98,18.96,18.94,18.94,18.91,\n                 18.90,18.89,18.87,18.85,18.85,18.84,18.83,18.81,18.81,18.81,\n                 18.81,18.81,18.80,18.79,18.80,18.79,18.79,18.78,18.77,18.78,\n                 18.79,18.79,18.79,18.79,18.79,18.79,18.80,18.79,18.81,18.80,\n                 18.81,18.81,18.82,18.84,18.87,18.89,18.89,18.91,18.96,19.02,\n                 19.11,19.15,18.95,18.92,18.84,18.85,18.96,18.92,18.95,18.95,\n                 18.91,19.00,19.02,19.06,19.05,19.47,19.32,19.05,19.66,19.57,\n                 19.23,19.42,19.36,19.66,19.79,19.81,19.99,21.10,21.94,22.52,\n                 22.81,22.43,22.16,21.55,21.80,21.02,21.85,21.45,22.48,22.73,\n                 22.61,22.83,20.85,20.68,19.76,19.81,19.74,19.58,19.35,19.40,\n                 19.75,19.76,19.85,19.82,19.86,20.08,20.06,19.85,20.04,19.90,\n                 19.96,20.12,19.94,20.20,20.17,20.31,20.17,20.37,20.36,20.13)\n\n\nWie viele Einträge hat der Vektor?\nTeste die Funktionen range, summary und boxplot mit dem Vektor.\nKonvertiere die Werte von Celsius nach Fahrenheit.\nSowohl sort als auch order sortieren den Vektor. Was ist der Unterschied zwischen beiden Funktionen?\n\n\n\n\nGib den 5ten Wert des Vektors aus.\nGib nur den letzten Wert des Vektors aus.\nSpeichere die ersten 20 Temperaturen in einer neuen Variablen.\nSpeichere die 30 niedrigsten Temperaturen in einer neuen Variablen.\n\n\n\n\n\nGib alle Temperaturen aus die 22°C überschreiten.\nWie oft wurde genau 18.79°C gemessen?\n\n\nGib alle Temperaturen aus die zwischen 19 und 21°C liegen. Tipp: Dafür benötigt es zwei logische Abfragen die mit & (sprich UND) verknüpft werden.\n\n\nGib alle Werte aus die mehr als 0.5 von der mittleren Temperatur abweichen. Tipp: Dafür benötigt es zwei logische Abfragen die mit | (sprich ODER) verknüpft werden.",
    "crumbs": [
      "Basics",
      "Ex02: Second Steps"
    ]
  },
  {
    "objectID": "E02_vectors_logic.html#vektor-indexing",
    "href": "E02_vectors_logic.html#vektor-indexing",
    "title": "Ex02: Second Steps",
    "section": "",
    "text": "Gib den 5ten Wert des Vektors aus.\nGib nur den letzten Wert des Vektors aus.\nSpeichere die ersten 20 Temperaturen in einer neuen Variablen.\nSpeichere die 30 niedrigsten Temperaturen in einer neuen Variablen.",
    "crumbs": [
      "Basics",
      "Ex02: Second Steps"
    ]
  },
  {
    "objectID": "E02_vectors_logic.html#logische-operatoren",
    "href": "E02_vectors_logic.html#logische-operatoren",
    "title": "Ex02: Second Steps",
    "section": "",
    "text": "Gib alle Temperaturen aus die 22°C überschreiten.\nWie oft wurde genau 18.79°C gemessen?\n\n\nGib alle Temperaturen aus die zwischen 19 und 21°C liegen. Tipp: Dafür benötigt es zwei logische Abfragen die mit & (sprich UND) verknüpft werden.\n\n\nGib alle Werte aus die mehr als 0.5 von der mittleren Temperatur abweichen. Tipp: Dafür benötigt es zwei logische Abfragen die mit | (sprich ODER) verknüpft werden.",
    "crumbs": [
      "Basics",
      "Ex02: Second Steps"
    ]
  },
  {
    "objectID": "E04_more_dataframes.html",
    "href": "E04_more_dataframes.html",
    "title": "Ex04a: Trees, Districts and base R",
    "section": "",
    "text": "Im Learnweb finden sich die Dateien muenster_districts.csv und muenster_trees.csv. Sie beinhalten Informationen zu den Stadtbezirken und Bäumen in Münster.\n\nLade beide Dateien in R.\n\n\nVerschaffe dir einen Überblick über die beiden data.frames mit den Funktionen head(), str().\n\n\nUm Informationen über einzelne Spalten zu erhalten sind die Funktionen table() und unique() sehr nützlich. Teste die Funktionen mit der district_group Spalte.\n\n\n\n\nWelcher Bezirk Münsters ist am größten?\n\n\nWie groß ist die Bezirksgruppe “Altstadt”?\n\n\nZu welcher Bezirksgruppe gehört der Bezirk “Schloss”?\n\n\nAus welchen Bezirken besteht die Bezirksgruppe “Münster-West”?\n\n\n\n\n\nWie viele Baumarten gibt es in Münster?\n\n\nWie viele Buchen (species: Fagus) gibt es in Münster?\n\n\nIn welchem Bezirk stehen die meisten Bäume?\n\n\nIn welchem Bezirk stehen die meisten Magnolien (species: Magnolia)?\n\n\n\n\n\nErstelle eine Karte aller Bäume in den Bezirksgruppen “Altstadt” und “Innenstadtring”.",
    "crumbs": [
      "Dataframes",
      "Ex04a: Trees, Districts and base R"
    ]
  },
  {
    "objectID": "E04_more_dataframes.html#münsters-bezirke",
    "href": "E04_more_dataframes.html#münsters-bezirke",
    "title": "Ex04a: Trees, Districts and base R",
    "section": "",
    "text": "Welcher Bezirk Münsters ist am größten?\n\n\nWie groß ist die Bezirksgruppe “Altstadt”?\n\n\nZu welcher Bezirksgruppe gehört der Bezirk “Schloss”?\n\n\nAus welchen Bezirken besteht die Bezirksgruppe “Münster-West”?",
    "crumbs": [
      "Dataframes",
      "Ex04a: Trees, Districts and base R"
    ]
  },
  {
    "objectID": "E04_more_dataframes.html#münsters-bäume",
    "href": "E04_more_dataframes.html#münsters-bäume",
    "title": "Ex04a: Trees, Districts and base R",
    "section": "",
    "text": "Wie viele Baumarten gibt es in Münster?\n\n\nWie viele Buchen (species: Fagus) gibt es in Münster?\n\n\nIn welchem Bezirk stehen die meisten Bäume?\n\n\nIn welchem Bezirk stehen die meisten Magnolien (species: Magnolia)?",
    "crumbs": [
      "Dataframes",
      "Ex04a: Trees, Districts and base R"
    ]
  },
  {
    "objectID": "E04_more_dataframes.html#und-noch-was-zum-knobeln",
    "href": "E04_more_dataframes.html#und-noch-was-zum-knobeln",
    "title": "Ex04a: Trees, Districts and base R",
    "section": "",
    "text": "Erstelle eine Karte aller Bäume in den Bezirksgruppen “Altstadt” und “Innenstadtring”.",
    "crumbs": [
      "Dataframes",
      "Ex04a: Trees, Districts and base R"
    ]
  },
  {
    "objectID": "E06_german_climate.html",
    "href": "E06_german_climate.html",
    "title": "Analysis of Ecological Data",
    "section": "",
    "text": "The German Weather Service DWD provides a variety of openly available climate, weather and phenology data in their data portal.\n\nDownload the regional average summer temperature of germany.\nThe file is a simple .txt file. Open it with a text editor and have a conscious look at the structure and content.\nLoad the file into R with the read.table or read.csv function.\nBy default, read.table will throw an error at you and the output of read.csv is weird. Why?\nLook at the help page of read.csv / read.table and fix the issues.\n\nHint: the correct data.frame should look something like this:\n\nhead(dwd)\n\n  Jahr summer Brandenburg.Berlin Brandenburg Baden.Wuerttemberg Bayern Hessen\n1 1881 summer              17.13       17.11              17.03  16.39  16.62\n2 1882 summer              16.45       16.44              14.85  14.46  15.02\n3 1883 summer              17.52       17.51              15.87  15.50  16.15\n4 1884 summer              17.00       16.98              16.08  15.35  16.01\n5 1885 summer              17.18       17.17              16.63  16.05  15.84\n6 1886 summer              17.16       17.15              16.04  15.47  15.88\n  Mecklenburg.Vorpommern Niedersachsen Niedersachsen.Hamburg.Bremen\n1                  16.12         16.24                        16.24\n2                  16.19         15.71                        15.72\n3                  16.66         16.35                        16.36\n4                  16.32         16.20                        16.21\n5                  16.06         15.78                        15.78\n6                  16.05         15.89                        15.89\n  Nordrhein.Westfalen Rheinland.Pfalz Schleswig.Holstein Saarland Sachsen\n1               16.66           16.90              15.80    17.19   16.20\n2               15.48           15.16              16.10    15.33   15.05\n3               16.37           16.23              16.31    16.42   16.49\n4               16.45           16.52              16.19    16.83   15.92\n5               16.11           16.28              15.53    16.65   16.29\n6               16.17           16.17              15.52    16.42   16.09\n  Sachsen.Anhalt Thueringen.Sachsen.Anhalt Thueringen Deutschland  X\n1          16.88                     16.46      15.95       16.53 NA\n2          16.02                     15.41      14.64       15.33 NA\n3          17.14                     16.57      15.84       16.26 NA\n4          16.57                     16.02      15.33       16.10 NA\n5          16.63                     16.10      15.43       16.18 NA\n6          16.61                     16.05      15.35       16.00 NA\n\n\n\nWhich year had the warmest summer in Bayern since the beginning of the recordings?\nWhat was the average summer temperature in Nordrhein-Westfalen since the year 2000.\nWhich German state had the coldest summer in the year 2005.\n\nNow we want to have a look at the temperature anomaly over the years, i.e. the deviation of the temperature from a long term mean. For this we want to re-create a figure like this:\n\n\n\n\n\n\n\n\n\n\nCalculate the average summer temperature of Germany between the years 1961 and 1990.\nCalculate the temperature anomaly for each year in Germany, i.e. the deviation of the yearly temperature to the calculated long term average.\nCreate a plot of the anomaly. Hint: set the argument type = \"h\" in the plot function to get bars instead of points.",
    "crumbs": [
      "Dataframes",
      "Ex06: Climate Change"
    ]
  },
  {
    "objectID": "E06_german_climate.html#ex06-climate-change",
    "href": "E06_german_climate.html#ex06-climate-change",
    "title": "Analysis of Ecological Data",
    "section": "",
    "text": "The German Weather Service DWD provides a variety of openly available climate, weather and phenology data in their data portal.\n\nDownload the regional average summer temperature of germany.\nThe file is a simple .txt file. Open it with a text editor and have a conscious look at the structure and content.\nLoad the file into R with the read.table or read.csv function.\nBy default, read.table will throw an error at you and the output of read.csv is weird. Why?\nLook at the help page of read.csv / read.table and fix the issues.\n\nHint: the correct data.frame should look something like this:\n\nhead(dwd)\n\n  Jahr summer Brandenburg.Berlin Brandenburg Baden.Wuerttemberg Bayern Hessen\n1 1881 summer              17.13       17.11              17.03  16.39  16.62\n2 1882 summer              16.45       16.44              14.85  14.46  15.02\n3 1883 summer              17.52       17.51              15.87  15.50  16.15\n4 1884 summer              17.00       16.98              16.08  15.35  16.01\n5 1885 summer              17.18       17.17              16.63  16.05  15.84\n6 1886 summer              17.16       17.15              16.04  15.47  15.88\n  Mecklenburg.Vorpommern Niedersachsen Niedersachsen.Hamburg.Bremen\n1                  16.12         16.24                        16.24\n2                  16.19         15.71                        15.72\n3                  16.66         16.35                        16.36\n4                  16.32         16.20                        16.21\n5                  16.06         15.78                        15.78\n6                  16.05         15.89                        15.89\n  Nordrhein.Westfalen Rheinland.Pfalz Schleswig.Holstein Saarland Sachsen\n1               16.66           16.90              15.80    17.19   16.20\n2               15.48           15.16              16.10    15.33   15.05\n3               16.37           16.23              16.31    16.42   16.49\n4               16.45           16.52              16.19    16.83   15.92\n5               16.11           16.28              15.53    16.65   16.29\n6               16.17           16.17              15.52    16.42   16.09\n  Sachsen.Anhalt Thueringen.Sachsen.Anhalt Thueringen Deutschland  X\n1          16.88                     16.46      15.95       16.53 NA\n2          16.02                     15.41      14.64       15.33 NA\n3          17.14                     16.57      15.84       16.26 NA\n4          16.57                     16.02      15.33       16.10 NA\n5          16.63                     16.10      15.43       16.18 NA\n6          16.61                     16.05      15.35       16.00 NA\n\n\n\nWhich year had the warmest summer in Bayern since the beginning of the recordings?\nWhat was the average summer temperature in Nordrhein-Westfalen since the year 2000.\nWhich German state had the coldest summer in the year 2005.\n\nNow we want to have a look at the temperature anomaly over the years, i.e. the deviation of the temperature from a long term mean. For this we want to re-create a figure like this:\n\n\n\n\n\n\n\n\n\n\nCalculate the average summer temperature of Germany between the years 1961 and 1990.\nCalculate the temperature anomaly for each year in Germany, i.e. the deviation of the yearly temperature to the calculated long term average.\nCreate a plot of the anomaly. Hint: set the argument type = \"h\" in the plot function to get bars instead of points.",
    "crumbs": [
      "Dataframes",
      "Ex06: Climate Change"
    ]
  },
  {
    "objectID": "E08_feldfruechte_arthropoden.html",
    "href": "E08_feldfruechte_arthropoden.html",
    "title": "Ex06: Crop vs. Species",
    "section": "",
    "text": "Many studies in landscape ecology deal with species data. Usually, these studies follow a plot based design to compare different environments and ecosystems in terms of abundances or species diversity. To practice everything we’ve learned so far and to go on further we want to have a look at another real world dataset. The species data below was collected by Michael Meyer. To find out more about the original goal of why this data was collected you can have a look at Meyer et al. (2019). While the statistical analysis of this paper is more advanced and not suited for this beginner course, the structure of the data is very easy and also allows the practice of more simple methods.\n\n\n\nFirst entries of species data by Meyer et al. 2019\n\n\n\n\n\n\n\n\n\n\n\n\nplotcode\nCroptype\nAraInd\nAraSpec\nCaraInd\nCaraSpec\nIsoMyrInd\nIsoMyrSpec\n\n\n\n\n1\nWW\n111\n17\n191\n15\n6\n2\n\n\n4\nSM\n102\n20\n149\n14\n52\n2\n\n\n5\nWW\n154\n19\n96\n11\n16\n4\n\n\n10\nSM\n13\n8\n80\n12\n10\n1\n\n\n12\nZR\n125\n14\n108\n18\n14\n4\n\n\n13\nWW\n107\n15\n178\n18\n23\n3\n\n\n16\nWW\n81\n19\n97\n12\n23\n3\n\n\n20\nWR\n132\n20\n327\n12\n8\n3\n\n\n24\nKE\n66\n12\n141\n13\n9\n2\n\n\n26\nWW\n100\n17\n136\n17\n4\n2\n\n\n\n\n\nThe column names and crop types appear very cryptic at first sight. Here are some explanations:\n\nGP = Grain Pea\nSB = Sugar Beet\nSM = Silage Maize\nWR = Winter oilseed Rape\nWW = Winter Wheat\nAra = Araneae\nCara = Carabidae\nIsoDip = Isopoda and Diplopoda\nIsoMyr = Isopoda and Myriapoda\nInd = Number of individual animals\nSpec = Number of species\n\n\n\n\nlibrary(dplyr)\nbd = read.csv(\"data/crop_species.csv\")\n\n\nHow many different crop types where analysed in the study?\n\n\nHow many plots are there for each crop type?\n\n\nWhich plot had the most individual animals? (regardless of species)\n\n\nWhich plot had the most species?\n\n\nWhat is the average number of Carabidaes on all the plots containing winter wheat?\n\n\nWhat is the minimum number of individuals and species per crop type?\n\n\nVisualize the number of Carabidaes per crop type.\n\n\nPlot the number of Araneae species in relation to the number of individual Araneae.\n\n\nIf there are more individual Araneae on a plot, are there also more Araneae species?",
    "crumbs": [
      "Utility \n & Applications",
      "Ex06: Crop vs. Species"
    ]
  },
  {
    "objectID": "E08_feldfruechte_arthropoden.html#task-crops-vs.-species",
    "href": "E08_feldfruechte_arthropoden.html#task-crops-vs.-species",
    "title": "Ex06: Crop vs. Species",
    "section": "",
    "text": "library(dplyr)\nbd = read.csv(\"data/crop_species.csv\")\n\n\nHow many different crop types where analysed in the study?\n\n\nHow many plots are there for each crop type?\n\n\nWhich plot had the most individual animals? (regardless of species)\n\n\nWhich plot had the most species?\n\n\nWhat is the average number of Carabidaes on all the plots containing winter wheat?\n\n\nWhat is the minimum number of individuals and species per crop type?\n\n\nVisualize the number of Carabidaes per crop type.\n\n\nPlot the number of Araneae species in relation to the number of individual Araneae.\n\n\nIf there are more individual Araneae on a plot, are there also more Araneae species?",
    "crumbs": [
      "Utility \n & Applications",
      "Ex06: Crop vs. Species"
    ]
  },
  {
    "objectID": "E09_ggplot.html",
    "href": "E09_ggplot.html",
    "title": "Ex09: ggplot Gallery",
    "section": "",
    "text": "Ex09: ggplot Gallery\nErstelle folgende Grafiken mit ggplot2:\n\nBoxplots der Aranae Species pro Feldfruchttyp.\n\n\nScatterplot der Carabidae Individuen und Carabidae Species. Die Punkte sollen je nach Feldfrucht unterschiedlich gefärbt sein.\n\n\nErstelle eine Karte der Bäume Münsters (nur mit ggplot!).\n\n\nErstelle eine “heatmap” der Bäume in Münster (geom_bin_2d or geom_hex)\n\n\nPlotte die Zeitreihe der Sommertemperatur in Deutschland mit:\n\neiner x-Achse in einem Zeitformat. Nutze lubridate::years() um das Datum vernünftig zu formatieren.\neiner horizontalen Linie das langjährige Mittel der Temperatur zw. 1961 und 1990 anzeigt.\nFärbe die Zeitreihe nach der Temperatur ein. Nutze eine geeignete Farbskala.",
    "crumbs": [
      "Graphics",
      "Ex09: ggplot Gallery"
    ]
  },
  {
    "objectID": "R01_introduction.html",
    "href": "R01_introduction.html",
    "title": "What is R?",
    "section": "",
    "text": "R is a script Language\nVersion 1.0 from 2000 (concept dates back to 1974)\nOriginal Aim: Statistical Analysis\nDesigned for data analysis and “interactive” use\nDownload: r-project.org\n\n\n\n\nr-project.org\n\n\n\n\n\nWhat you see when you start R\n\n\n\n\nHow R code looks like:\n\ndata &lt;- c(12, 45, 65, 1, 3, 87)\nmean(data)\n\ndata &lt;- data + 5\nsort(data)\n\nHow R code looks like with output:\n\ndata &lt;- c(12, 45, 65, 1, 3, 87)\nmean(data)\n\n[1] 35.5\n\ndata &lt;- data + 5\nsort(data)\n\n[1]  6  8 17 50 70 92\n\n\n\n\n\n\nEasy to get into (although it might not feel that way at first)\nDesigned for solving scientific problems\nBig community - Getting help is really easy.\nOpen-source, active development\n\n\nThe R package structure has been the key addition to the software - J. Chambers M. (2020)\n\n\nExpandable with packages provided by other R users\n\nSpecialized analysis for specific fields\nMachine Learning\nMedicine\nWriting Books\n…\n\nUsed in science, industry, healthcare, NGOs, …\n\n\n\n\nSlater et al. (2019) : Workflow with R packages\n\n\n\n\n\n\nIntegrated Development Environment (IDE)\nMakes R “convenient” to use\nText Editor + R Console\nProject Environments, Package Management, Help Pages, Plot Viewer, File Browser …\n\n\n\n\n\nOpen Rstudio and get familiar with the interface.\nCreate a new, empty R script.\nWhat is the difference between the script editor and the console?\nCopy the code below into the R script and run it line by line. Try to understand what each line does.\n\n\na &lt;- 5\nb &lt;- 10\n\na + b\n\np &lt;- a-b\n\nv &lt;- c(3,12,6,9,23)\nv\n\nv / b\n\nmean(v)\n# sum(v)\n\n\n\n\nWhy does p &lt;- a*b not produce an output?\nWhat is c()?\nWhy does # sum(v) not work?\n\n\nEverything that exists in R is an object. Everything that happens in R is a function call. - J. M. Chambers (2016)",
    "crumbs": [
      "Basics",
      "What is R?"
    ]
  },
  {
    "objectID": "R01_introduction.html#r-code",
    "href": "R01_introduction.html#r-code",
    "title": "What is R?",
    "section": "",
    "text": "How R code looks like:\n\ndata &lt;- c(12, 45, 65, 1, 3, 87)\nmean(data)\n\ndata &lt;- data + 5\nsort(data)\n\nHow R code looks like with output:\n\ndata &lt;- c(12, 45, 65, 1, 3, 87)\nmean(data)\n\n[1] 35.5\n\ndata &lt;- data + 5\nsort(data)\n\n[1]  6  8 17 50 70 92",
    "crumbs": [
      "Basics",
      "What is R?"
    ]
  },
  {
    "objectID": "R01_introduction.html#why-r",
    "href": "R01_introduction.html#why-r",
    "title": "What is R?",
    "section": "",
    "text": "Easy to get into (although it might not feel that way at first)\nDesigned for solving scientific problems\nBig community - Getting help is really easy.\nOpen-source, active development\n\n\nThe R package structure has been the key addition to the software - J. Chambers M. (2020)\n\n\nExpandable with packages provided by other R users\n\nSpecialized analysis for specific fields\nMachine Learning\nMedicine\nWriting Books\n…\n\nUsed in science, industry, healthcare, NGOs, …\n\n\n\n\nSlater et al. (2019) : Workflow with R packages",
    "crumbs": [
      "Basics",
      "What is R?"
    ]
  },
  {
    "objectID": "R01_introduction.html#rstudio",
    "href": "R01_introduction.html#rstudio",
    "title": "What is R?",
    "section": "",
    "text": "Integrated Development Environment (IDE)\nMakes R “convenient” to use\nText Editor + R Console\nProject Environments, Package Management, Help Pages, Plot Viewer, File Browser …",
    "crumbs": [
      "Basics",
      "What is R?"
    ]
  },
  {
    "objectID": "R01_introduction.html#task-r-and-rstudio",
    "href": "R01_introduction.html#task-r-and-rstudio",
    "title": "What is R?",
    "section": "",
    "text": "Open Rstudio and get familiar with the interface.\nCreate a new, empty R script.\nWhat is the difference between the script editor and the console?\nCopy the code below into the R script and run it line by line. Try to understand what each line does.\n\n\na &lt;- 5\nb &lt;- 10\n\na + b\n\np &lt;- a-b\n\nv &lt;- c(3,12,6,9,23)\nv\n\nv / b\n\nmean(v)\n# sum(v)\n\n\n\n\nWhy does p &lt;- a*b not produce an output?\nWhat is c()?\nWhy does # sum(v) not work?\n\n\nEverything that exists in R is an object. Everything that happens in R is a function call. - J. M. Chambers (2016)",
    "crumbs": [
      "Basics",
      "What is R?"
    ]
  },
  {
    "objectID": "R03_vectors.html",
    "href": "R03_vectors.html",
    "title": "Vectors",
    "section": "",
    "text": "most important data structure in R\nbuilding block for more complicated structures\ncreated with the function c()\nthink about a container where you can put in multiple things\nvectors are atomic - each entry has to be from the same value type\neach element has an index with which it can be accessed\n\n\n\n\n\n\nR vector model\n\n\n\n\n\nc(23, 1, 60, 21, 21)\n\n[1] 23  1 60 21 21\n\n\n\n# vectors are atomic\nc(23, 1, 60.5, 21, 21)\n\n[1] 23.0  1.0 60.5 21.0 21.0\n\n# to actually use a vector we have to assign it to a variable\nvec = c(23, 1, 60, 21, 21)\n\n\n\n\n\n\n\n\nR vector addition\n\n\n\n\n\nmost of the functions in R are “vectorised”\ni.e. functions are applied to all the elements in a vector\n\n\nvec1 = c(23, 1, 60, 21, 21, 5)\nvec1 + 6\n\n[1] 29  7 66 27 27 11\n\nvec2 = c(5, 1000, 5, 1000, 5, 1000)\nvec1 - vec2\n\n[1]   18 -999   55 -979   16 -995\n\n\n\n\n\n\n\nR vector multiplication, different length\n\n\n\n\n\n# be careful with vectors of different length!\nvec3 = c(1, 2, 1)\nvec1 * vec3\n\n[1] 23  2 60 21 42  5\n\nvec4 = c(1, 2, 1, 2)\nvec1 * vec4\n\n[1] 23  2 60 42 21 10\n\n\n\n\n\nThe vector below are the temperature values for the Aasee in Münster from the 2021-06-02.\n\ntemperature &lt;- c(18.81,18.73,18.92,18.87,18.76,18.79,18.87,18.84,18.89,18.89,\n                 18.93,18.95,18.92,18.97,19.00,18.99,19.00,19.00,18.99,19.00,\n                 18.98,18.97,18.97,18.97,18.97,18.98,18.96,18.94,18.94,18.91,\n                 18.90,18.89,18.87,18.85,18.85,18.84,18.83,18.81,18.81,18.81,\n                 18.81,18.81,18.80,18.79,18.80,18.79,18.79,18.78,18.77,18.78,\n                 18.79,18.79,18.79,18.79,18.79,18.79,18.80,18.79,18.81,18.80,\n                 18.81,18.81,18.82,18.84,18.87,18.89,18.89,18.91,18.96,19.02,\n                 19.11,19.15,18.95,18.92,18.84,18.85,18.96,18.92,18.95,18.95,\n                 18.91,19.00,19.02,19.06,19.05,19.47,19.32,19.05,19.66,19.57,\n                 19.23,19.42,19.36,19.66,19.79,19.81,19.99,21.10,21.94,22.52,\n                 22.81,22.43,22.16,21.55,21.80,21.02,21.85,21.45,22.48,22.73,\n                 22.61,22.83,20.85,20.68,19.76,19.81,19.74,19.58,19.35,19.40,\n                 19.75,19.76,19.85,19.82,19.86,20.08,20.06,19.85,20.04,19.90,\n                 19.96,20.12,19.94,20.20,20.17,20.31,20.17,20.37,20.36,20.13)\n\n\n\n\nFor many questions it is often required to access only parts of the data. This is one of the most common things you have to deal with in R.\nTo access single values of a vector, use square brackets [].\n\n# get the third value of the vector\ntemperature[3]\n\n[1] 18.92\n\n# accessing multiple elements at once\ntemperature[1,2]\n\nError in temperature[1, 2]: incorrect number of dimensions\n\ntemperature[c(1,2)]\n\n[1] 18.81 18.73\n\n\n\nWhat is an easy way to access the first 10 elements of the vector?",
    "crumbs": [
      "Basics",
      "Vectors"
    ]
  },
  {
    "objectID": "R03_vectors.html#vector-maths",
    "href": "R03_vectors.html#vector-maths",
    "title": "Vectors",
    "section": "",
    "text": "R vector addition\n\n\n\n\n\nmost of the functions in R are “vectorised”\ni.e. functions are applied to all the elements in a vector\n\n\nvec1 = c(23, 1, 60, 21, 21, 5)\nvec1 + 6\n\n[1] 29  7 66 27 27 11\n\nvec2 = c(5, 1000, 5, 1000, 5, 1000)\nvec1 - vec2\n\n[1]   18 -999   55 -979   16 -995\n\n\n\n\n\n\n\nR vector multiplication, different length\n\n\n\n\n\n# be careful with vectors of different length!\nvec3 = c(1, 2, 1)\nvec1 * vec3\n\n[1] 23  2 60 21 42  5\n\nvec4 = c(1, 2, 1, 2)\nvec1 * vec4\n\n[1] 23  2 60 42 21 10",
    "crumbs": [
      "Basics",
      "Vectors"
    ]
  },
  {
    "objectID": "R03_vectors.html#vectors-and-functions",
    "href": "R03_vectors.html#vectors-and-functions",
    "title": "Vectors",
    "section": "",
    "text": "The vector below are the temperature values for the Aasee in Münster from the 2021-06-02.\n\ntemperature &lt;- c(18.81,18.73,18.92,18.87,18.76,18.79,18.87,18.84,18.89,18.89,\n                 18.93,18.95,18.92,18.97,19.00,18.99,19.00,19.00,18.99,19.00,\n                 18.98,18.97,18.97,18.97,18.97,18.98,18.96,18.94,18.94,18.91,\n                 18.90,18.89,18.87,18.85,18.85,18.84,18.83,18.81,18.81,18.81,\n                 18.81,18.81,18.80,18.79,18.80,18.79,18.79,18.78,18.77,18.78,\n                 18.79,18.79,18.79,18.79,18.79,18.79,18.80,18.79,18.81,18.80,\n                 18.81,18.81,18.82,18.84,18.87,18.89,18.89,18.91,18.96,19.02,\n                 19.11,19.15,18.95,18.92,18.84,18.85,18.96,18.92,18.95,18.95,\n                 18.91,19.00,19.02,19.06,19.05,19.47,19.32,19.05,19.66,19.57,\n                 19.23,19.42,19.36,19.66,19.79,19.81,19.99,21.10,21.94,22.52,\n                 22.81,22.43,22.16,21.55,21.80,21.02,21.85,21.45,22.48,22.73,\n                 22.61,22.83,20.85,20.68,19.76,19.81,19.74,19.58,19.35,19.40,\n                 19.75,19.76,19.85,19.82,19.86,20.08,20.06,19.85,20.04,19.90,\n                 19.96,20.12,19.94,20.20,20.17,20.31,20.17,20.37,20.36,20.13)",
    "crumbs": [
      "Basics",
      "Vectors"
    ]
  },
  {
    "objectID": "R03_vectors.html#indexing",
    "href": "R03_vectors.html#indexing",
    "title": "Vectors",
    "section": "",
    "text": "For many questions it is often required to access only parts of the data. This is one of the most common things you have to deal with in R.\nTo access single values of a vector, use square brackets [].\n\n# get the third value of the vector\ntemperature[3]\n\n[1] 18.92\n\n# accessing multiple elements at once\ntemperature[1,2]\n\nError in temperature[1, 2]: incorrect number of dimensions\n\ntemperature[c(1,2)]\n\n[1] 18.81 18.73\n\n\n\nWhat is an easy way to access the first 10 elements of the vector?",
    "crumbs": [
      "Basics",
      "Vectors"
    ]
  },
  {
    "objectID": "R05_dataframes.html",
    "href": "R05_dataframes.html",
    "title": "Introduction to data.frame",
    "section": "",
    "text": "Introduction to data.frame\n\nFrom a data science perspective, the most important class of objects is the data frame - Chambers (2020)\n\n\nDataframes combine multiple vector in a structured format\nIntuitive - most people have seen a spreadsheet before\nEach column is regarded as a vector\nEach vector can have a different data type\n\n\n\n\n\n\ndata.frames are a named list of vectors\n\n\n\n\n\nCreate one with data.frame\nThe functions need the column name followed by the vector of values\n\n\ndf = data.frame(plotID = seq(3),\n                soil_ph = c(5.5, 5.4, 6.1),\n                soil_temperature = c(10, 11, 12),\n                forest_type = c(\"coniferous\", \"coniferous\", \"deciduous\"))\n\ndf\n\n  plotID soil_ph soil_temperature forest_type\n1      1     5.5               10  coniferous\n2      2     5.4               11  coniferous\n3      3     6.1               12   deciduous\n\n\n\ndata = read.csv(file = \"data/2021-06_aasee.csv\", dec = \".\", sep = \",\")\n\n\n# show the first few rows of the df\nhead(data)\n\n             Datum Wassertemperatur pH.Wert Sauerstoffgehalt\n1 2021-05-31 23:57            17.98    8.05            10.53\n2 2021-06-01 00:09            17.66    8.04             9.64\n3 2021-06-01 00:19            18.03    8.12            11.30\n4 2021-06-01 00:27            18.08    8.14            11.32\n5 2021-06-01 00:39            18.06    8.12            11.06\n6 2021-06-01 00:49            18.01    8.10            10.91\n\n# show the last few rows of the df\ntail(data)\n\n                Datum Wassertemperatur pH.Wert Sauerstoffgehalt\n4220 2021-06-30 22:57            23.73    8.78            17.80\n4221 2021-06-30 23:09            23.70    8.72            17.66\n4222 2021-06-30 23:18            23.68    8.73            17.72\n4223 2021-06-30 23:29            23.64    8.81            18.38\n4224 2021-06-30 23:39            23.62    8.76            17.93\n4225 2021-06-30 23:49            23.63    8.77            17.82\n\n# get a short summary of the structure\nstr(data)\n\n'data.frame':   4225 obs. of  4 variables:\n $ Datum           : chr  \"2021-05-31 23:57\" \"2021-06-01 00:09\" \"2021-06-01 00:19\" \"2021-06-01 00:27\" ...\n $ Wassertemperatur: num  18 17.7 18 18.1 18.1 ...\n $ pH.Wert         : num  8.05 8.04 8.12 8.14 8.12 8.1 8.1 8.1 8.1 8.1 ...\n $ Sauerstoffgehalt: num  10.53 9.64 11.3 11.32 11.06 ...\n\n\n\n\n\n\n\nReferences\n\nChambers, John, M. 2020. “S, R, and Data Science.” The R Journal 12 (1): 462. https://doi.org/10.32614/RJ-2020-028.",
    "crumbs": [
      "Dataframes",
      "Introduction to data.frame"
    ]
  },
  {
    "objectID": "R06_long_wide.html",
    "href": "R06_long_wide.html",
    "title": "Long and Wide format",
    "section": "",
    "text": "Long and Wide format\nSoonTM",
    "crumbs": [
      "Dataframes",
      "Long and Wide format"
    ]
  },
  {
    "objectID": "R07_lists.html",
    "href": "R07_lists.html",
    "title": "Lists",
    "section": "",
    "text": "stores arbitrary content (string, numeric, vectors…)\ncreated with list(), entries separated by ,\n\n\nnumber = 6\nl = list(5, number, \"Gardenia\", c(1,5))\nl\n\n[[1]]\n[1] 5\n\n[[2]]\n[1] 6\n\n[[3]]\n[1] \"Gardenia\"\n\n[[4]]\n[1] 1 5\n\n\n\n\n\nlength(l)\n\n[1] 4\n\nsummary(l)\n\n     Length Class  Mode     \n[1,] 1      -none- numeric  \n[2,] 1      -none- numeric  \n[3,] 1      -none- character\n[4,] 2      -none- numeric  \n\n\n\n\n\nThere are multiple ways to subset a list (i.e. get a specific or multiple entries).\nSubsetting with [ ] returns a list.\n\nl[1]\n\n[[1]]\n[1] 5\n\nclass(l[1])\n\n[1] \"list\"\n\n# We can select multiple entries by using a vector\nl[c(1,3)]\n\n[[1]]\n[1] 5\n\n[[2]]\n[1] \"Gardenia\"\n\n\nMore commonly you don’t want a list, but the content that is stored in the list. For this you use double square brackets [[ ]].\n\nl[[2]]\n\n[1] 6\n\nclass(l[[2]])\n\n[1] \"numeric\"\n\n# Selecting multiple entries like this is not possible\n\nl[[c(1,2)]]\n\nError in l[[c(1, 2)]]: subscript out of bounds\n\n\n\n\n\nLists become even more useful when we start to name list entries. Our created list does not have names (we declared no names in the list creation).\n\nnames(l)\n\nNULL\n\nnames(l) = c(\"a\", \"b\", \"c\", \"d\")\nl\n\n$a\n[1] 5\n\n$b\n[1] 6\n\n$c\n[1] \"Gardenia\"\n\n$d\n[1] 1 5\n\n\nCalling the list now also shows the entry names (after the $). We can use the names now to select specific entries.\n\n# single brackets: return list\nl[c(\"c\", \"a\")]\n\n$c\n[1] \"Gardenia\"\n\n$a\n[1] 5\n\n# double brackets: return value\nl[[\"b\"]]\n\n[1] 6\n\n# or use the dollar sign $\nl$b\n\n[1] 6",
    "crumbs": [
      "Utility \n & Applications",
      "Lists"
    ]
  },
  {
    "objectID": "R07_lists.html#some-generic-functions-with-lists",
    "href": "R07_lists.html#some-generic-functions-with-lists",
    "title": "Lists",
    "section": "",
    "text": "length(l)\n\n[1] 4\n\nsummary(l)\n\n     Length Class  Mode     \n[1,] 1      -none- numeric  \n[2,] 1      -none- numeric  \n[3,] 1      -none- character\n[4,] 2      -none- numeric",
    "crumbs": [
      "Utility \n & Applications",
      "Lists"
    ]
  },
  {
    "objectID": "R07_lists.html#subsetting-lists",
    "href": "R07_lists.html#subsetting-lists",
    "title": "Lists",
    "section": "",
    "text": "There are multiple ways to subset a list (i.e. get a specific or multiple entries).\nSubsetting with [ ] returns a list.\n\nl[1]\n\n[[1]]\n[1] 5\n\nclass(l[1])\n\n[1] \"list\"\n\n# We can select multiple entries by using a vector\nl[c(1,3)]\n\n[[1]]\n[1] 5\n\n[[2]]\n[1] \"Gardenia\"\n\n\nMore commonly you don’t want a list, but the content that is stored in the list. For this you use double square brackets [[ ]].\n\nl[[2]]\n\n[1] 6\n\nclass(l[[2]])\n\n[1] \"numeric\"\n\n# Selecting multiple entries like this is not possible\n\nl[[c(1,2)]]\n\nError in l[[c(1, 2)]]: subscript out of bounds",
    "crumbs": [
      "Utility \n & Applications",
      "Lists"
    ]
  },
  {
    "objectID": "R07_lists.html#named-entries",
    "href": "R07_lists.html#named-entries",
    "title": "Lists",
    "section": "",
    "text": "Lists become even more useful when we start to name list entries. Our created list does not have names (we declared no names in the list creation).\n\nnames(l)\n\nNULL\n\nnames(l) = c(\"a\", \"b\", \"c\", \"d\")\nl\n\n$a\n[1] 5\n\n$b\n[1] 6\n\n$c\n[1] \"Gardenia\"\n\n$d\n[1] 1 5\n\n\nCalling the list now also shows the entry names (after the $). We can use the names now to select specific entries.\n\n# single brackets: return list\nl[c(\"c\", \"a\")]\n\n$c\n[1] \"Gardenia\"\n\n$a\n[1] 5\n\n# double brackets: return value\nl[[\"b\"]]\n\n[1] 6\n\n# or use the dollar sign $\nl$b\n\n[1] 6",
    "crumbs": [
      "Utility \n & Applications",
      "Lists"
    ]
  },
  {
    "objectID": "R09_linearmodels.html",
    "href": "R09_linearmodels.html",
    "title": "Linear Models",
    "section": "",
    "text": "Linear models describe the relation between two variables. In a non-technical description we can think about linear model like:\n\nFind a line that is as close as possible to all the points of a scatterplot.\n\n\n\n\n\n\n\n\n\n\nFor example, we can use a linear model to depict the relation between the amount of samples animals and the number of different species found in a given area. To create a linear model, we need two vectors (here as two columns of a data.frame) with the matching data pairs (Abundance and Species Number). The lm function then need a formula with the vector/column names separated by ~. Think about the ~ like as a function of. So lm(Species ~ Abundance) means: Give me the number of species as a function of species abundance.\n\nlibrary(dplyr)\nbd = read.csv(\"data/crop_species.csv\")\n\nbd = bd %&gt;% mutate(Abundance = AraInd + CaraInd + IsoMyrInd,\n              Species = AraSpec, CaraSpec, IsoMyrSpec)\n\nlmod = lm(Species ~ Abundance, bd)\nlmod\n\n\nCall:\nlm(formula = Species ~ Abundance, data = bd)\n\nCoefficients:\n(Intercept)    Abundance  \n   10.71651      0.01749  \n\n\n\n\nCalling the model returns the intercept and slope. To get a more useful output use the summary function. In the following we will go over the output of the summary function on linear models. The explanations are mostly taken from this blog entry: https://feliperego.github.io/blog/2015/10/23/Interpreting-Model-Output-In-R\n\nsummary(lmod)\n\n\nCall:\nlm(formula = Species ~ Abundance, data = bd)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.3136 -1.2481 -0.2235  1.1245  5.3046 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 10.716507   0.991039  10.813 1.58e-15 ***\nAbundance    0.017491   0.003656   4.784 1.22e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.416 on 58 degrees of freedom\nMultiple R-squared:  0.2829,    Adjusted R-squared:  0.2706 \nF-statistic: 22.89 on 1 and 58 DF,  p-value: 1.221e-05\n\n\n\n\n\nthe function that was used to create the model\n\n\n\n\n\nsummary statistic of the model error\n“How far away are the real values from the model?”\nshould follow a normal distribution (e.g. by plotting a histogram)\n\n\n\n\n\n\n\n\n\n\n\nhist(lmod$residuals)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nagain the slope and intercept\nwe can expect to observed at least 10.7 different species on a plot (if we collect 103 animals)\nfor each additional animal observed, the species count increases by 0.017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthe expected error of the coefficients\nfor each additional animal observed, the species number increases by 0.017 +- 0.0037\n\n\n\n\n\nhow many standard deviation is the std. error away from zero?\nfar away from zero is better. Reduces the probability that the result is due to chance\nusually not interpreted\n\n\n\n\n\nprobability that the observed value is larger than t\nsmall value means that there is a high chance that the relation is not based on chance\np values &lt; than 0.05 is the convention that we can neglect the H0 hypothesis (the model actually depicts a relation)\n\n\n\n\n\na legend for the significance level of the p-value\n\n\n\n\n\nstandard deviation of the residuals\nthe average deviation of the real values from the model value\ndegree of freedom: on how many observations is this value based on?\n\n\n\n\n\nHow much of the variance is explained by the model?\nValues between 0 and 1\n0 means no explanation, 1 means perfect fit\nDepends on the specific example!\n\n\n\n\n\nIs there a relation between the predictor and the response?\nIs my model better than if all the coefficients are zero?\nAway from 1 is good!\nDepend on number of data points.\n\n\n\n\n\n\nPlotting the linear model gives you 4 different figures that indicate if the model is statistically valid in the first place, i.e. if the residuals follow a normal distribution and if they are homoscedatic.\n\n\n\nIs it actually a linear relation?\nPoints randomly scattered around a horizontal line indicates this\n\n\n\n\n\nAre the residuals normally distributed?\nPoints on the 1-1 line indicates this\nDepicted are the actual residuals vs. a theoretical normal distribution\n\n\n\n\n\nAre the residuals homoscedatic?\nThis means that the range of the residuals are more or less equal for the whole data range\nEqually spread points around the line indicates this\n\n\n\n\n\nAre there outliers in the data that have influence on the model?\nIn this example, if we would leave out point #12, the model outcome would change.\n\n\nplot(lmod)",
    "crumbs": [
      "Utility \n & Applications",
      "Linear Models"
    ]
  },
  {
    "objectID": "R09_linearmodels.html#linear-model-summary",
    "href": "R09_linearmodels.html#linear-model-summary",
    "title": "Linear Models",
    "section": "",
    "text": "Calling the model returns the intercept and slope. To get a more useful output use the summary function. In the following we will go over the output of the summary function on linear models. The explanations are mostly taken from this blog entry: https://feliperego.github.io/blog/2015/10/23/Interpreting-Model-Output-In-R\n\nsummary(lmod)\n\n\nCall:\nlm(formula = Species ~ Abundance, data = bd)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.3136 -1.2481 -0.2235  1.1245  5.3046 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 10.716507   0.991039  10.813 1.58e-15 ***\nAbundance    0.017491   0.003656   4.784 1.22e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.416 on 58 degrees of freedom\nMultiple R-squared:  0.2829,    Adjusted R-squared:  0.2706 \nF-statistic: 22.89 on 1 and 58 DF,  p-value: 1.221e-05\n\n\n\n\n\nthe function that was used to create the model\n\n\n\n\n\nsummary statistic of the model error\n“How far away are the real values from the model?”\nshould follow a normal distribution (e.g. by plotting a histogram)\n\n\n\n\n\n\n\n\n\n\n\nhist(lmod$residuals)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nagain the slope and intercept\nwe can expect to observed at least 10.7 different species on a plot (if we collect 103 animals)\nfor each additional animal observed, the species count increases by 0.017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthe expected error of the coefficients\nfor each additional animal observed, the species number increases by 0.017 +- 0.0037\n\n\n\n\n\nhow many standard deviation is the std. error away from zero?\nfar away from zero is better. Reduces the probability that the result is due to chance\nusually not interpreted\n\n\n\n\n\nprobability that the observed value is larger than t\nsmall value means that there is a high chance that the relation is not based on chance\np values &lt; than 0.05 is the convention that we can neglect the H0 hypothesis (the model actually depicts a relation)\n\n\n\n\n\na legend for the significance level of the p-value\n\n\n\n\n\nstandard deviation of the residuals\nthe average deviation of the real values from the model value\ndegree of freedom: on how many observations is this value based on?\n\n\n\n\n\nHow much of the variance is explained by the model?\nValues between 0 and 1\n0 means no explanation, 1 means perfect fit\nDepends on the specific example!\n\n\n\n\n\nIs there a relation between the predictor and the response?\nIs my model better than if all the coefficients are zero?\nAway from 1 is good!\nDepend on number of data points.",
    "crumbs": [
      "Utility \n & Applications",
      "Linear Models"
    ]
  },
  {
    "objectID": "R09_linearmodels.html#linear-model-plot",
    "href": "R09_linearmodels.html#linear-model-plot",
    "title": "Linear Models",
    "section": "",
    "text": "Plotting the linear model gives you 4 different figures that indicate if the model is statistically valid in the first place, i.e. if the residuals follow a normal distribution and if they are homoscedatic.\n\n\n\nIs it actually a linear relation?\nPoints randomly scattered around a horizontal line indicates this\n\n\n\n\n\nAre the residuals normally distributed?\nPoints on the 1-1 line indicates this\nDepicted are the actual residuals vs. a theoretical normal distribution\n\n\n\n\n\nAre the residuals homoscedatic?\nThis means that the range of the residuals are more or less equal for the whole data range\nEqually spread points around the line indicates this\n\n\n\n\n\nAre there outliers in the data that have influence on the model?\nIn this example, if we would leave out point #12, the model outcome would change.\n\n\nplot(lmod)",
    "crumbs": [
      "Utility \n & Applications",
      "Linear Models"
    ]
  },
  {
    "objectID": "R11_markdown.html",
    "href": "R11_markdown.html",
    "title": "markdown and quarto",
    "section": "",
    "text": "Rstudio is much more than a code editor for R. It supports a variety of programming languages, documentation formats and data types. One of Rstudio’s most used and most powerful features is the creation of markdown documents with integrated R code. In fact, this entire course page is written in markdown within Rstudio and then rendered as a website. As with Rstudio Version v2022.07, the markdown system of choice is quarto - “An open-source scientific and technical publishing system” https://quarto.org/. Older versions use rmarkdown. https://rmarkdown.rstudio.com/.\nDepending on the system you are using, the typical file ending for the markdown files are either .qmd or .rmd.\n\n\nMarkdown is a “language” to format text. There are dedicated symbols for different purposes:\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n*italics*, **bold**, ***bold italics***\nitalics, bold, bold italics\n\n\n# Header 1\n\n\n\n## Header 2\n\n\n\n[Quarto](https://quarto.org)\nQuarto\n\n\n\nThese examples are taken from https://quarto.org/docs/authoring/markdown-basics.html where you can find more more markdown syntax.\n\n\n\nSimply go to File - New File - Quarto Document... or File - New File - R Markdown... to create a markdown file with some example code and work your way from there. Or if you want to jump right into markdown projects go to New Project... - New Directory and choose an appropriate Template (e.g. Quarto Homepage).",
    "crumbs": [
      "Graphics",
      "markdown and quarto"
    ]
  },
  {
    "objectID": "R11_markdown.html#what-is-markdown",
    "href": "R11_markdown.html#what-is-markdown",
    "title": "markdown and quarto",
    "section": "",
    "text": "Markdown is a “language” to format text. There are dedicated symbols for different purposes:\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n*italics*, **bold**, ***bold italics***\nitalics, bold, bold italics\n\n\n# Header 1\n\n\n\n## Header 2\n\n\n\n[Quarto](https://quarto.org)\nQuarto\n\n\n\nThese examples are taken from https://quarto.org/docs/authoring/markdown-basics.html where you can find more more markdown syntax.",
    "crumbs": [
      "Graphics",
      "markdown and quarto"
    ]
  },
  {
    "objectID": "R11_markdown.html#using-markdown-in-rstudio",
    "href": "R11_markdown.html#using-markdown-in-rstudio",
    "title": "markdown and quarto",
    "section": "",
    "text": "Simply go to File - New File - Quarto Document... or File - New File - R Markdown... to create a markdown file with some example code and work your way from there. Or if you want to jump right into markdown projects go to New Project... - New Directory and choose an appropriate Template (e.g. Quarto Homepage).",
    "crumbs": [
      "Graphics",
      "markdown and quarto"
    ]
  },
  {
    "objectID": "98-additional_resources.html",
    "href": "98-additional_resources.html",
    "title": "Additional Ressources",
    "section": "",
    "text": "These are compact overview of R functions and how to use them.\nhttps://www.rstudio.com/resources/cheatsheets/\nUseful for the course are the following:\n\nBase R\nstringr\nlubridate\ndplyr\nggplot2\n\n\n\n\n\nCtrl + i: indent automatically\nCtrl + shift + c: comment / uncomment marked lines\nCtrl + s: save script\nCtrl + shift + m: insert pipe operator %&gt;%/|&gt;\nF1: open help page of marked function\nF2: open source code of marked function",
    "crumbs": [
      "Appendix",
      "Additional Ressources"
    ]
  },
  {
    "objectID": "98-additional_resources.html#r-cheat-sheets",
    "href": "98-additional_resources.html#r-cheat-sheets",
    "title": "Additional Ressources",
    "section": "",
    "text": "These are compact overview of R functions and how to use them.\nhttps://www.rstudio.com/resources/cheatsheets/\nUseful for the course are the following:\n\nBase R\nstringr\nlubridate\ndplyr\nggplot2",
    "crumbs": [
      "Appendix",
      "Additional Ressources"
    ]
  },
  {
    "objectID": "98-additional_resources.html#useful-keyboard-shortcuts",
    "href": "98-additional_resources.html#useful-keyboard-shortcuts",
    "title": "Additional Ressources",
    "section": "",
    "text": "Ctrl + i: indent automatically\nCtrl + shift + c: comment / uncomment marked lines\nCtrl + s: save script\nCtrl + shift + m: insert pipe operator %&gt;%/|&gt;\nF1: open help page of marked function\nF2: open source code of marked function",
    "crumbs": [
      "Appendix",
      "Additional Ressources"
    ]
  }
]